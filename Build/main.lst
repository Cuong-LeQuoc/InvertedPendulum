ARM GAS  C:\Users\CuongLe\AppData\Local\Temp\ccsxSNGX.s 			page 1


   1              		.cpu cortex-m4
   2              		.arch armv7e-m
   3              		.fpu fpv4-sp-d16
   4              		.eabi_attribute 27, 1
   5              		.eabi_attribute 28, 1
   6              		.eabi_attribute 20, 1
   7              		.eabi_attribute 21, 1
   8              		.eabi_attribute 23, 3
   9              		.eabi_attribute 24, 1
  10              		.eabi_attribute 25, 1
  11              		.eabi_attribute 26, 1
  12              		.eabi_attribute 30, 1
  13              		.eabi_attribute 34, 1
  14              		.eabi_attribute 18, 4
  15              		.file	"main.c"
  16              		.text
  17              	.Ltext0:
  18              		.cfi_sections	.debug_frame
  19              		.file 1 "Core/Src/main.c"
  20              		.section	.text.MX_GPIO_Init,"ax",%progbits
  21              		.align	1
  22              		.syntax unified
  23              		.thumb
  24              		.thumb_func
  26              	MX_GPIO_Init:
  27              	.LFB297:
   1:Core/Src/main.c **** /* USER CODE BEGIN Header */
   2:Core/Src/main.c **** /**
   3:Core/Src/main.c ****   ******************************************************************************
   4:Core/Src/main.c ****   * @file           : main.c
   5:Core/Src/main.c ****   * @brief          : Main program body
   6:Core/Src/main.c ****   ******************************************************************************
   7:Core/Src/main.c ****   * @attention
   8:Core/Src/main.c ****   *
   9:Core/Src/main.c ****   * Copyright (c) 2025 STMicroelectronics.
  10:Core/Src/main.c ****   * All rights reserved.
  11:Core/Src/main.c ****   *
  12:Core/Src/main.c ****   * This software is licensed under terms that can be found in the LICENSE file
  13:Core/Src/main.c ****   * in the root directory of this software component.
  14:Core/Src/main.c ****   * If no LICENSE file comes with this software, it is provided AS-IS.
  15:Core/Src/main.c ****   *
  16:Core/Src/main.c ****   ******************************************************************************
  17:Core/Src/main.c ****   */
  18:Core/Src/main.c **** /* USER CODE END Header */
  19:Core/Src/main.c **** /* Includes ------------------------------------------------------------------*/
  20:Core/Src/main.c **** #include "main.h"
  21:Core/Src/main.c **** 
  22:Core/Src/main.c **** /* Private includes ----------------------------------------------------------*/
  23:Core/Src/main.c **** /* USER CODE BEGIN Includes */
  24:Core/Src/main.c **** 
  25:Core/Src/main.c **** /* USER CODE END Includes */
  26:Core/Src/main.c **** 
  27:Core/Src/main.c **** /* Private typedef -----------------------------------------------------------*/
  28:Core/Src/main.c **** /* USER CODE BEGIN PTD */
  29:Core/Src/main.c **** 
  30:Core/Src/main.c **** /* USER CODE END PTD */
  31:Core/Src/main.c **** 
ARM GAS  C:\Users\CuongLe\AppData\Local\Temp\ccsxSNGX.s 			page 2


  32:Core/Src/main.c **** /* Private define ------------------------------------------------------------*/
  33:Core/Src/main.c **** /* USER CODE BEGIN PD */
  34:Core/Src/main.c **** 
  35:Core/Src/main.c **** /* USER CODE END PD */
  36:Core/Src/main.c **** 
  37:Core/Src/main.c **** /* Private macro -------------------------------------------------------------*/
  38:Core/Src/main.c **** /* USER CODE BEGIN PM */
  39:Core/Src/main.c **** 
  40:Core/Src/main.c **** /* USER CODE END PM */
  41:Core/Src/main.c **** 
  42:Core/Src/main.c **** /* Private variables ---------------------------------------------------------*/
  43:Core/Src/main.c **** ADC_HandleTypeDef hadc1;
  44:Core/Src/main.c **** 
  45:Core/Src/main.c **** TIM_HandleTypeDef htim2;
  46:Core/Src/main.c **** TIM_HandleTypeDef htim3;
  47:Core/Src/main.c **** TIM_HandleTypeDef htim6;
  48:Core/Src/main.c **** TIM_HandleTypeDef htim7;
  49:Core/Src/main.c **** 
  50:Core/Src/main.c **** UART_HandleTypeDef huart2;
  51:Core/Src/main.c **** UART_HandleTypeDef huart3;
  52:Core/Src/main.c **** 
  53:Core/Src/main.c **** /* USER CODE BEGIN PV */
  54:Core/Src/main.c **** static struct Computer computer;
  55:Core/Src/main.c **** static struct Active * computer_AO = &computer.super;
  56:Core/Src/main.c **** 
  57:Core/Src/main.c **** static struct Estimator estimator;
  58:Core/Src/main.c **** static struct Active * estimator_AO = &estimator.super;
  59:Core/Src/main.c **** 
  60:Core/Src/main.c **** static struct Motor motor;
  61:Core/Src/main.c **** static struct Active * motor_AO = &motor.super;
  62:Core/Src/main.c **** 
  63:Core/Src/main.c **** /* USER CODE END PV */
  64:Core/Src/main.c **** 
  65:Core/Src/main.c **** /* Private function prototypes -----------------------------------------------*/
  66:Core/Src/main.c **** void SystemClock_Config(void);
  67:Core/Src/main.c **** static void MX_GPIO_Init(void);
  68:Core/Src/main.c **** static void MX_TIM2_Init(void);
  69:Core/Src/main.c **** static void MX_USART2_UART_Init(void);
  70:Core/Src/main.c **** static void MX_USART3_UART_Init(void);
  71:Core/Src/main.c **** static void MX_TIM6_Init(void);
  72:Core/Src/main.c **** static void MX_TIM7_Init(void);
  73:Core/Src/main.c **** static void MX_TIM3_Init(void);
  74:Core/Src/main.c **** static void MX_ADC1_Init(void);
  75:Core/Src/main.c **** /* USER CODE BEGIN PFP */
  76:Core/Src/main.c **** 
  77:Core/Src/main.c **** /* USER CODE END PFP */
  78:Core/Src/main.c **** 
  79:Core/Src/main.c **** /* Private user code ---------------------------------------------------------*/
  80:Core/Src/main.c **** /* USER CODE BEGIN 0 */
  81:Core/Src/main.c **** 
  82:Core/Src/main.c **** /* USER CODE END 0 */
  83:Core/Src/main.c **** 
  84:Core/Src/main.c **** /**
  85:Core/Src/main.c ****   * @brief  The application entry point.
  86:Core/Src/main.c ****   * @retval int
  87:Core/Src/main.c ****   */
  88:Core/Src/main.c **** int main(void)
ARM GAS  C:\Users\CuongLe\AppData\Local\Temp\ccsxSNGX.s 			page 3


  89:Core/Src/main.c **** {
  90:Core/Src/main.c **** 
  91:Core/Src/main.c ****   /* USER CODE BEGIN 1 */
  92:Core/Src/main.c **** 
  93:Core/Src/main.c ****   /* USER CODE END 1 */
  94:Core/Src/main.c **** 
  95:Core/Src/main.c ****   /* MCU Configuration--------------------------------------------------------*/
  96:Core/Src/main.c **** 
  97:Core/Src/main.c ****   /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  98:Core/Src/main.c ****   HAL_Init();
  99:Core/Src/main.c **** 
 100:Core/Src/main.c ****   /* USER CODE BEGIN Init */
 101:Core/Src/main.c **** 
 102:Core/Src/main.c ****   /* USER CODE END Init */
 103:Core/Src/main.c **** 
 104:Core/Src/main.c ****   /* Configure the system clock */
 105:Core/Src/main.c ****   SystemClock_Config();
 106:Core/Src/main.c **** 
 107:Core/Src/main.c ****   /* USER CODE BEGIN SysInit */
 108:Core/Src/main.c **** 
 109:Core/Src/main.c ****   /* USER CODE END SysInit */
 110:Core/Src/main.c **** 
 111:Core/Src/main.c ****   /* Initialize all configured peripherals */
 112:Core/Src/main.c ****   MX_GPIO_Init();
 113:Core/Src/main.c ****   MX_TIM2_Init();
 114:Core/Src/main.c ****   MX_USART2_UART_Init();
 115:Core/Src/main.c ****   MX_USART3_UART_Init();
 116:Core/Src/main.c ****   MX_TIM6_Init();
 117:Core/Src/main.c ****   MX_TIM7_Init();
 118:Core/Src/main.c ****   MX_TIM3_Init();
 119:Core/Src/main.c ****   MX_ADC1_Init();
 120:Core/Src/main.c ****   /* USER CODE BEGIN 2 */
 121:Core/Src/main.c **** 
 122:Core/Src/main.c ****   Computer.new(&computer);
 123:Core/Src/main.c ****   computer.super.start(computer_AO, 1, 15, 1500);
 124:Core/Src/main.c **** 
 125:Core/Src/main.c ****   Estimator.new(&estimator);
 126:Core/Src/main.c ****   estimator.super.start(estimator_AO, 2, 20, 3000);
 127:Core/Src/main.c **** 
 128:Core/Src/main.c ****   Motor.new(&motor);
 129:Core/Src/main.c ****   motor.super.start(motor_AO, 3, 15, 1500);
 130:Core/Src/main.c **** 
 131:Core/Src/main.c ****   vTaskStartScheduler();
 132:Core/Src/main.c **** 
 133:Core/Src/main.c ****   /* USER CODE END 2 */
 134:Core/Src/main.c **** 
 135:Core/Src/main.c ****   /* Infinite loop */
 136:Core/Src/main.c ****   /* USER CODE BEGIN WHILE */
 137:Core/Src/main.c ****   while (1)
 138:Core/Src/main.c ****   {
 139:Core/Src/main.c ****     /* USER CODE END WHILE */
 140:Core/Src/main.c **** 
 141:Core/Src/main.c ****     /* USER CODE BEGIN 3 */
 142:Core/Src/main.c ****   }
 143:Core/Src/main.c ****   /* USER CODE END 3 */
 144:Core/Src/main.c **** }
 145:Core/Src/main.c **** 
ARM GAS  C:\Users\CuongLe\AppData\Local\Temp\ccsxSNGX.s 			page 4


 146:Core/Src/main.c **** /**
 147:Core/Src/main.c ****   * @brief System Clock Configuration
 148:Core/Src/main.c ****   * @retval None
 149:Core/Src/main.c ****   */
 150:Core/Src/main.c **** void SystemClock_Config(void)
 151:Core/Src/main.c **** {
 152:Core/Src/main.c ****   RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 153:Core/Src/main.c ****   RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 154:Core/Src/main.c **** 
 155:Core/Src/main.c ****   /** Configure the main internal regulator output voltage
 156:Core/Src/main.c ****   */
 157:Core/Src/main.c ****   __HAL_RCC_PWR_CLK_ENABLE();
 158:Core/Src/main.c ****   __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 159:Core/Src/main.c **** 
 160:Core/Src/main.c ****   /** Initializes the RCC Oscillators according to the specified parameters
 161:Core/Src/main.c ****   * in the RCC_OscInitTypeDef structure.
 162:Core/Src/main.c ****   */
 163:Core/Src/main.c ****   RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 164:Core/Src/main.c ****   RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 165:Core/Src/main.c ****   RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 166:Core/Src/main.c ****   RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 167:Core/Src/main.c ****   RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 168:Core/Src/main.c ****   RCC_OscInitStruct.PLL.PLLM = 8;
 169:Core/Src/main.c ****   RCC_OscInitStruct.PLL.PLLN = 168;
 170:Core/Src/main.c ****   RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 171:Core/Src/main.c ****   RCC_OscInitStruct.PLL.PLLQ = 4;
 172:Core/Src/main.c ****   if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 173:Core/Src/main.c ****   {
 174:Core/Src/main.c ****     Error_Handler();
 175:Core/Src/main.c ****   }
 176:Core/Src/main.c **** 
 177:Core/Src/main.c ****   /** Initializes the CPU, AHB and APB buses clocks
 178:Core/Src/main.c ****   */
 179:Core/Src/main.c ****   RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 180:Core/Src/main.c ****                               |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
 181:Core/Src/main.c ****   RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 182:Core/Src/main.c ****   RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 183:Core/Src/main.c ****   RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 184:Core/Src/main.c ****   RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 185:Core/Src/main.c **** 
 186:Core/Src/main.c ****   if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 187:Core/Src/main.c ****   {
 188:Core/Src/main.c ****     Error_Handler();
 189:Core/Src/main.c ****   }
 190:Core/Src/main.c **** }
 191:Core/Src/main.c **** 
 192:Core/Src/main.c **** /**
 193:Core/Src/main.c ****   * @brief ADC1 Initialization Function
 194:Core/Src/main.c ****   * @param None
 195:Core/Src/main.c ****   * @retval None
 196:Core/Src/main.c ****   */
 197:Core/Src/main.c **** static void MX_ADC1_Init(void)
 198:Core/Src/main.c **** {
 199:Core/Src/main.c **** 
 200:Core/Src/main.c ****   /* USER CODE BEGIN ADC1_Init 0 */
 201:Core/Src/main.c **** 
 202:Core/Src/main.c ****   /* USER CODE END ADC1_Init 0 */
ARM GAS  C:\Users\CuongLe\AppData\Local\Temp\ccsxSNGX.s 			page 5


 203:Core/Src/main.c **** 
 204:Core/Src/main.c ****   ADC_ChannelConfTypeDef sConfig = {0};
 205:Core/Src/main.c **** 
 206:Core/Src/main.c ****   /* USER CODE BEGIN ADC1_Init 1 */
 207:Core/Src/main.c **** 
 208:Core/Src/main.c ****   /* USER CODE END ADC1_Init 1 */
 209:Core/Src/main.c **** 
 210:Core/Src/main.c ****   /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of con
 211:Core/Src/main.c ****   */
 212:Core/Src/main.c ****   hadc1.Instance = ADC1;
 213:Core/Src/main.c ****   hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 214:Core/Src/main.c ****   hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 215:Core/Src/main.c ****   hadc1.Init.ScanConvMode = DISABLE;
 216:Core/Src/main.c ****   hadc1.Init.ContinuousConvMode = ENABLE;
 217:Core/Src/main.c ****   hadc1.Init.DiscontinuousConvMode = DISABLE;
 218:Core/Src/main.c ****   hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 219:Core/Src/main.c ****   hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 220:Core/Src/main.c ****   hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 221:Core/Src/main.c ****   hadc1.Init.NbrOfConversion = 1;
 222:Core/Src/main.c ****   hadc1.Init.DMAContinuousRequests = DISABLE;
 223:Core/Src/main.c ****   hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 224:Core/Src/main.c ****   if (HAL_ADC_Init(&hadc1) != HAL_OK)
 225:Core/Src/main.c ****   {
 226:Core/Src/main.c ****     Error_Handler();
 227:Core/Src/main.c ****   }
 228:Core/Src/main.c **** 
 229:Core/Src/main.c ****   /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and it
 230:Core/Src/main.c ****   */
 231:Core/Src/main.c ****   sConfig.Channel = ADC_CHANNEL_5;
 232:Core/Src/main.c ****   sConfig.Rank = 1;
 233:Core/Src/main.c ****   sConfig.SamplingTime = ADC_SAMPLETIME_480CYCLES;
 234:Core/Src/main.c ****   if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 235:Core/Src/main.c ****   {
 236:Core/Src/main.c ****     Error_Handler();
 237:Core/Src/main.c ****   }
 238:Core/Src/main.c ****   /* USER CODE BEGIN ADC1_Init 2 */
 239:Core/Src/main.c **** 
 240:Core/Src/main.c ****   /* USER CODE END ADC1_Init 2 */
 241:Core/Src/main.c **** 
 242:Core/Src/main.c **** }
 243:Core/Src/main.c **** 
 244:Core/Src/main.c **** /**
 245:Core/Src/main.c ****   * @brief TIM2 Initialization Function
 246:Core/Src/main.c ****   * @param None
 247:Core/Src/main.c ****   * @retval None
 248:Core/Src/main.c ****   */
 249:Core/Src/main.c **** static void MX_TIM2_Init(void)
 250:Core/Src/main.c **** {
 251:Core/Src/main.c **** 
 252:Core/Src/main.c ****   /* USER CODE BEGIN TIM2_Init 0 */
 253:Core/Src/main.c **** 
 254:Core/Src/main.c ****   /* USER CODE END TIM2_Init 0 */
 255:Core/Src/main.c **** 
 256:Core/Src/main.c ****   TIM_Encoder_InitTypeDef sConfig = {0};
 257:Core/Src/main.c ****   TIM_MasterConfigTypeDef sMasterConfig = {0};
 258:Core/Src/main.c **** 
 259:Core/Src/main.c ****   /* USER CODE BEGIN TIM2_Init 1 */
ARM GAS  C:\Users\CuongLe\AppData\Local\Temp\ccsxSNGX.s 			page 6


 260:Core/Src/main.c **** 
 261:Core/Src/main.c ****   /* USER CODE END TIM2_Init 1 */
 262:Core/Src/main.c ****   htim2.Instance = TIM2;
 263:Core/Src/main.c ****   htim2.Init.Prescaler = 0;
 264:Core/Src/main.c ****   htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 265:Core/Src/main.c ****   htim2.Init.Period = 4294967295;
 266:Core/Src/main.c ****   htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 267:Core/Src/main.c ****   htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 268:Core/Src/main.c ****   sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 269:Core/Src/main.c ****   sConfig.IC1Polarity = TIM_ICPOLARITY_FALLING;
 270:Core/Src/main.c ****   sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 271:Core/Src/main.c ****   sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 272:Core/Src/main.c ****   sConfig.IC1Filter = 0;
 273:Core/Src/main.c ****   sConfig.IC2Polarity = TIM_ICPOLARITY_FALLING;
 274:Core/Src/main.c ****   sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 275:Core/Src/main.c ****   sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 276:Core/Src/main.c ****   sConfig.IC2Filter = 0;
 277:Core/Src/main.c ****   if (HAL_TIM_Encoder_Init(&htim2, &sConfig) != HAL_OK)
 278:Core/Src/main.c ****   {
 279:Core/Src/main.c ****     Error_Handler();
 280:Core/Src/main.c ****   }
 281:Core/Src/main.c ****   sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 282:Core/Src/main.c ****   sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 283:Core/Src/main.c ****   if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 284:Core/Src/main.c ****   {
 285:Core/Src/main.c ****     Error_Handler();
 286:Core/Src/main.c ****   }
 287:Core/Src/main.c ****   /* USER CODE BEGIN TIM2_Init 2 */
 288:Core/Src/main.c **** 
 289:Core/Src/main.c ****   /* USER CODE END TIM2_Init 2 */
 290:Core/Src/main.c **** 
 291:Core/Src/main.c **** }
 292:Core/Src/main.c **** 
 293:Core/Src/main.c **** /**
 294:Core/Src/main.c ****   * @brief TIM3 Initialization Function
 295:Core/Src/main.c ****   * @param None
 296:Core/Src/main.c ****   * @retval None
 297:Core/Src/main.c ****   */
 298:Core/Src/main.c **** static void MX_TIM3_Init(void)
 299:Core/Src/main.c **** {
 300:Core/Src/main.c **** 
 301:Core/Src/main.c ****   /* USER CODE BEGIN TIM3_Init 0 */
 302:Core/Src/main.c **** 
 303:Core/Src/main.c ****   /* USER CODE END TIM3_Init 0 */
 304:Core/Src/main.c **** 
 305:Core/Src/main.c ****   TIM_Encoder_InitTypeDef sConfig = {0};
 306:Core/Src/main.c ****   TIM_MasterConfigTypeDef sMasterConfig = {0};
 307:Core/Src/main.c **** 
 308:Core/Src/main.c ****   /* USER CODE BEGIN TIM3_Init 1 */
 309:Core/Src/main.c **** 
 310:Core/Src/main.c ****   /* USER CODE END TIM3_Init 1 */
 311:Core/Src/main.c ****   htim3.Instance = TIM3;
 312:Core/Src/main.c ****   htim3.Init.Prescaler = 0;
 313:Core/Src/main.c ****   htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 314:Core/Src/main.c ****   htim3.Init.Period = 65535;
 315:Core/Src/main.c ****   htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 316:Core/Src/main.c ****   htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
ARM GAS  C:\Users\CuongLe\AppData\Local\Temp\ccsxSNGX.s 			page 7


 317:Core/Src/main.c ****   sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 318:Core/Src/main.c ****   sConfig.IC1Polarity = TIM_ICPOLARITY_FALLING;
 319:Core/Src/main.c ****   sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 320:Core/Src/main.c ****   sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 321:Core/Src/main.c ****   sConfig.IC1Filter = 0;
 322:Core/Src/main.c ****   sConfig.IC2Polarity = TIM_ICPOLARITY_FALLING;
 323:Core/Src/main.c ****   sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 324:Core/Src/main.c ****   sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 325:Core/Src/main.c ****   sConfig.IC2Filter = 0;
 326:Core/Src/main.c ****   if (HAL_TIM_Encoder_Init(&htim3, &sConfig) != HAL_OK)
 327:Core/Src/main.c ****   {
 328:Core/Src/main.c ****     Error_Handler();
 329:Core/Src/main.c ****   }
 330:Core/Src/main.c ****   sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 331:Core/Src/main.c ****   sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 332:Core/Src/main.c ****   if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 333:Core/Src/main.c ****   {
 334:Core/Src/main.c ****     Error_Handler();
 335:Core/Src/main.c ****   }
 336:Core/Src/main.c ****   /* USER CODE BEGIN TIM3_Init 2 */
 337:Core/Src/main.c **** 
 338:Core/Src/main.c ****   /* USER CODE END TIM3_Init 2 */
 339:Core/Src/main.c **** 
 340:Core/Src/main.c **** }
 341:Core/Src/main.c **** 
 342:Core/Src/main.c **** /**
 343:Core/Src/main.c ****   * @brief TIM6 Initialization Function
 344:Core/Src/main.c ****   * @param None
 345:Core/Src/main.c ****   * @retval None
 346:Core/Src/main.c ****   */
 347:Core/Src/main.c **** static void MX_TIM6_Init(void)
 348:Core/Src/main.c **** {
 349:Core/Src/main.c **** 
 350:Core/Src/main.c ****   /* USER CODE BEGIN TIM6_Init 0 */
 351:Core/Src/main.c **** 
 352:Core/Src/main.c ****   /* USER CODE END TIM6_Init 0 */
 353:Core/Src/main.c **** 
 354:Core/Src/main.c ****   TIM_MasterConfigTypeDef sMasterConfig = {0};
 355:Core/Src/main.c **** 
 356:Core/Src/main.c ****   /* USER CODE BEGIN TIM6_Init 1 */
 357:Core/Src/main.c **** 
 358:Core/Src/main.c ****   /* USER CODE END TIM6_Init 1 */
 359:Core/Src/main.c ****   htim6.Instance = TIM6;
 360:Core/Src/main.c ****   htim6.Init.Prescaler = 839;
 361:Core/Src/main.c ****   htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 362:Core/Src/main.c ****   htim6.Init.Period = 999;
 363:Core/Src/main.c ****   htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 364:Core/Src/main.c ****   if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 365:Core/Src/main.c ****   {
 366:Core/Src/main.c ****     Error_Handler();
 367:Core/Src/main.c ****   }
 368:Core/Src/main.c ****   sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 369:Core/Src/main.c ****   sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 370:Core/Src/main.c ****   if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 371:Core/Src/main.c ****   {
 372:Core/Src/main.c ****     Error_Handler();
 373:Core/Src/main.c ****   }
ARM GAS  C:\Users\CuongLe\AppData\Local\Temp\ccsxSNGX.s 			page 8


 374:Core/Src/main.c ****   /* USER CODE BEGIN TIM6_Init 2 */
 375:Core/Src/main.c **** 
 376:Core/Src/main.c ****   /* USER CODE END TIM6_Init 2 */
 377:Core/Src/main.c **** 
 378:Core/Src/main.c **** }
 379:Core/Src/main.c **** 
 380:Core/Src/main.c **** /**
 381:Core/Src/main.c ****   * @brief TIM7 Initialization Function
 382:Core/Src/main.c ****   * @param None
 383:Core/Src/main.c ****   * @retval None
 384:Core/Src/main.c ****   */
 385:Core/Src/main.c **** static void MX_TIM7_Init(void)
 386:Core/Src/main.c **** {
 387:Core/Src/main.c **** 
 388:Core/Src/main.c ****   /* USER CODE BEGIN TIM7_Init 0 */
 389:Core/Src/main.c **** 
 390:Core/Src/main.c ****   /* USER CODE END TIM7_Init 0 */
 391:Core/Src/main.c **** 
 392:Core/Src/main.c ****   TIM_MasterConfigTypeDef sMasterConfig = {0};
 393:Core/Src/main.c **** 
 394:Core/Src/main.c ****   /* USER CODE BEGIN TIM7_Init 1 */
 395:Core/Src/main.c **** 
 396:Core/Src/main.c ****   /* USER CODE END TIM7_Init 1 */
 397:Core/Src/main.c ****   htim7.Instance = TIM7;
 398:Core/Src/main.c ****   htim7.Init.Prescaler = 83;
 399:Core/Src/main.c ****   htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
 400:Core/Src/main.c ****   htim7.Init.Period = 999;
 401:Core/Src/main.c ****   htim7.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 402:Core/Src/main.c ****   if (HAL_TIM_Base_Init(&htim7) != HAL_OK)
 403:Core/Src/main.c ****   {
 404:Core/Src/main.c ****     Error_Handler();
 405:Core/Src/main.c ****   }
 406:Core/Src/main.c ****   sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 407:Core/Src/main.c ****   sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 408:Core/Src/main.c ****   if (HAL_TIMEx_MasterConfigSynchronization(&htim7, &sMasterConfig) != HAL_OK)
 409:Core/Src/main.c ****   {
 410:Core/Src/main.c ****     Error_Handler();
 411:Core/Src/main.c ****   }
 412:Core/Src/main.c ****   /* USER CODE BEGIN TIM7_Init 2 */
 413:Core/Src/main.c **** 
 414:Core/Src/main.c ****   /* USER CODE END TIM7_Init 2 */
 415:Core/Src/main.c **** 
 416:Core/Src/main.c **** }
 417:Core/Src/main.c **** 
 418:Core/Src/main.c **** /**
 419:Core/Src/main.c ****   * @brief USART2 Initialization Function
 420:Core/Src/main.c ****   * @param None
 421:Core/Src/main.c ****   * @retval None
 422:Core/Src/main.c ****   */
 423:Core/Src/main.c **** static void MX_USART2_UART_Init(void)
 424:Core/Src/main.c **** {
 425:Core/Src/main.c **** 
 426:Core/Src/main.c ****   /* USER CODE BEGIN USART2_Init 0 */
 427:Core/Src/main.c **** 
 428:Core/Src/main.c ****   /* USER CODE END USART2_Init 0 */
 429:Core/Src/main.c **** 
 430:Core/Src/main.c ****   /* USER CODE BEGIN USART2_Init 1 */
ARM GAS  C:\Users\CuongLe\AppData\Local\Temp\ccsxSNGX.s 			page 9


 431:Core/Src/main.c **** 
 432:Core/Src/main.c ****   /* USER CODE END USART2_Init 1 */
 433:Core/Src/main.c ****   huart2.Instance = USART2;
 434:Core/Src/main.c ****   huart2.Init.BaudRate = 115200;
 435:Core/Src/main.c ****   huart2.Init.WordLength = UART_WORDLENGTH_8B;
 436:Core/Src/main.c ****   huart2.Init.StopBits = UART_STOPBITS_1;
 437:Core/Src/main.c ****   huart2.Init.Parity = UART_PARITY_NONE;
 438:Core/Src/main.c ****   huart2.Init.Mode = UART_MODE_TX_RX;
 439:Core/Src/main.c ****   huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 440:Core/Src/main.c ****   huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 441:Core/Src/main.c ****   if (HAL_UART_Init(&huart2) != HAL_OK)
 442:Core/Src/main.c ****   {
 443:Core/Src/main.c ****     Error_Handler();
 444:Core/Src/main.c ****   }
 445:Core/Src/main.c ****   /* USER CODE BEGIN USART2_Init 2 */
 446:Core/Src/main.c **** 
 447:Core/Src/main.c ****   /* USER CODE END USART2_Init 2 */
 448:Core/Src/main.c **** 
 449:Core/Src/main.c **** }
 450:Core/Src/main.c **** 
 451:Core/Src/main.c **** /**
 452:Core/Src/main.c ****   * @brief USART3 Initialization Function
 453:Core/Src/main.c ****   * @param None
 454:Core/Src/main.c ****   * @retval None
 455:Core/Src/main.c ****   */
 456:Core/Src/main.c **** static void MX_USART3_UART_Init(void)
 457:Core/Src/main.c **** {
 458:Core/Src/main.c **** 
 459:Core/Src/main.c ****   /* USER CODE BEGIN USART3_Init 0 */
 460:Core/Src/main.c **** 
 461:Core/Src/main.c ****   /* USER CODE END USART3_Init 0 */
 462:Core/Src/main.c **** 
 463:Core/Src/main.c ****   /* USER CODE BEGIN USART3_Init 1 */
 464:Core/Src/main.c **** 
 465:Core/Src/main.c ****   /* USER CODE END USART3_Init 1 */
 466:Core/Src/main.c ****   huart3.Instance = USART3;
 467:Core/Src/main.c ****   huart3.Init.BaudRate = 576000;
 468:Core/Src/main.c ****   huart3.Init.WordLength = UART_WORDLENGTH_8B;
 469:Core/Src/main.c ****   huart3.Init.StopBits = UART_STOPBITS_1;
 470:Core/Src/main.c ****   huart3.Init.Parity = UART_PARITY_NONE;
 471:Core/Src/main.c ****   huart3.Init.Mode = UART_MODE_TX_RX;
 472:Core/Src/main.c ****   huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 473:Core/Src/main.c ****   huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 474:Core/Src/main.c ****   if (HAL_UART_Init(&huart3) != HAL_OK)
 475:Core/Src/main.c ****   {
 476:Core/Src/main.c ****     Error_Handler();
 477:Core/Src/main.c ****   }
 478:Core/Src/main.c ****   /* USER CODE BEGIN USART3_Init 2 */
 479:Core/Src/main.c **** 
 480:Core/Src/main.c ****   /* USER CODE END USART3_Init 2 */
 481:Core/Src/main.c **** 
 482:Core/Src/main.c **** }
 483:Core/Src/main.c **** 
 484:Core/Src/main.c **** /**
 485:Core/Src/main.c ****   * @brief GPIO Initialization Function
 486:Core/Src/main.c ****   * @param None
 487:Core/Src/main.c ****   * @retval None
ARM GAS  C:\Users\CuongLe\AppData\Local\Temp\ccsxSNGX.s 			page 10


 488:Core/Src/main.c ****   */
 489:Core/Src/main.c **** static void MX_GPIO_Init(void)
 490:Core/Src/main.c **** {
  28              		.loc 1 490 1 view -0
  29              		.cfi_startproc
  30              		@ args = 0, pretend = 0, frame = 40
  31              		@ frame_needed = 0, uses_anonymous_args = 0
  32 0000 70B5     		push	{r4, r5, r6, lr}
  33              	.LCFI0:
  34              		.cfi_def_cfa_offset 16
  35              		.cfi_offset 4, -16
  36              		.cfi_offset 5, -12
  37              		.cfi_offset 6, -8
  38              		.cfi_offset 14, -4
  39 0002 8AB0     		sub	sp, sp, #40
  40              	.LCFI1:
  41              		.cfi_def_cfa_offset 56
 491:Core/Src/main.c ****   GPIO_InitTypeDef GPIO_InitStruct = {0};
  42              		.loc 1 491 3 view .LVU1
  43              		.loc 1 491 20 is_stmt 0 view .LVU2
  44 0004 05AD     		add	r5, sp, #20
  45 0006 0024     		movs	r4, #0
  46 0008 0594     		str	r4, [sp, #20]
  47 000a 0694     		str	r4, [sp, #24]
  48 000c 0794     		str	r4, [sp, #28]
  49 000e 0894     		str	r4, [sp, #32]
  50 0010 0994     		str	r4, [sp, #36]
 492:Core/Src/main.c **** /* USER CODE BEGIN MX_GPIO_Init_1 */
 493:Core/Src/main.c **** /* USER CODE END MX_GPIO_Init_1 */
 494:Core/Src/main.c **** 
 495:Core/Src/main.c ****   /* GPIO Ports Clock Enable */
 496:Core/Src/main.c ****   __HAL_RCC_GPIOH_CLK_ENABLE();
  51              		.loc 1 496 3 is_stmt 1 view .LVU3
  52              	.LBB4:
  53              		.loc 1 496 3 view .LVU4
  54 0012 0194     		str	r4, [sp, #4]
  55              		.loc 1 496 3 view .LVU5
  56 0014 1D4B     		ldr	r3, .L3
  57 0016 1A6B     		ldr	r2, [r3, #48]
  58 0018 42F08002 		orr	r2, r2, #128
  59 001c 1A63     		str	r2, [r3, #48]
  60              		.loc 1 496 3 view .LVU6
  61 001e 1A6B     		ldr	r2, [r3, #48]
  62 0020 02F08002 		and	r2, r2, #128
  63 0024 0192     		str	r2, [sp, #4]
  64              		.loc 1 496 3 view .LVU7
  65 0026 019A     		ldr	r2, [sp, #4]
  66              	.LBE4:
  67              		.loc 1 496 3 view .LVU8
 497:Core/Src/main.c ****   __HAL_RCC_GPIOA_CLK_ENABLE();
  68              		.loc 1 497 3 view .LVU9
  69              	.LBB5:
  70              		.loc 1 497 3 view .LVU10
  71 0028 0294     		str	r4, [sp, #8]
  72              		.loc 1 497 3 view .LVU11
  73 002a 1A6B     		ldr	r2, [r3, #48]
  74 002c 42F00102 		orr	r2, r2, #1
ARM GAS  C:\Users\CuongLe\AppData\Local\Temp\ccsxSNGX.s 			page 11


  75 0030 1A63     		str	r2, [r3, #48]
  76              		.loc 1 497 3 view .LVU12
  77 0032 1A6B     		ldr	r2, [r3, #48]
  78 0034 02F00102 		and	r2, r2, #1
  79 0038 0292     		str	r2, [sp, #8]
  80              		.loc 1 497 3 view .LVU13
  81 003a 029A     		ldr	r2, [sp, #8]
  82              	.LBE5:
  83              		.loc 1 497 3 view .LVU14
 498:Core/Src/main.c ****   __HAL_RCC_GPIOB_CLK_ENABLE();
  84              		.loc 1 498 3 view .LVU15
  85              	.LBB6:
  86              		.loc 1 498 3 view .LVU16
  87 003c 0394     		str	r4, [sp, #12]
  88              		.loc 1 498 3 view .LVU17
  89 003e 1A6B     		ldr	r2, [r3, #48]
  90 0040 42F00202 		orr	r2, r2, #2
  91 0044 1A63     		str	r2, [r3, #48]
  92              		.loc 1 498 3 view .LVU18
  93 0046 1A6B     		ldr	r2, [r3, #48]
  94 0048 02F00202 		and	r2, r2, #2
  95 004c 0392     		str	r2, [sp, #12]
  96              		.loc 1 498 3 view .LVU19
  97 004e 039A     		ldr	r2, [sp, #12]
  98              	.LBE6:
  99              		.loc 1 498 3 view .LVU20
 499:Core/Src/main.c ****   __HAL_RCC_GPIOD_CLK_ENABLE();
 100              		.loc 1 499 3 view .LVU21
 101              	.LBB7:
 102              		.loc 1 499 3 view .LVU22
 103 0050 0494     		str	r4, [sp, #16]
 104              		.loc 1 499 3 view .LVU23
 105 0052 1A6B     		ldr	r2, [r3, #48]
 106 0054 42F00802 		orr	r2, r2, #8
 107 0058 1A63     		str	r2, [r3, #48]
 108              		.loc 1 499 3 view .LVU24
 109 005a 1B6B     		ldr	r3, [r3, #48]
 110 005c 03F00803 		and	r3, r3, #8
 111 0060 0493     		str	r3, [sp, #16]
 112              		.loc 1 499 3 view .LVU25
 113 0062 049B     		ldr	r3, [sp, #16]
 114              	.LBE7:
 115              		.loc 1 499 3 view .LVU26
 500:Core/Src/main.c **** 
 501:Core/Src/main.c ****   /*Configure GPIO pin Output Level */
 502:Core/Src/main.c ****   HAL_GPIO_WritePin(GPIOD, GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15, GPIO_PIN_RESET);
 116              		.loc 1 502 3 view .LVU27
 117 0064 0A4E     		ldr	r6, .L3+4
 118 0066 2246     		mov	r2, r4
 119 0068 4FF47041 		mov	r1, #61440
 120 006c 3046     		mov	r0, r6
 121 006e FFF7FEFF 		bl	HAL_GPIO_WritePin
 122              	.LVL0:
 503:Core/Src/main.c **** 
 504:Core/Src/main.c ****   /*Configure GPIO pins : PD12 PD13 PD14 PD15 */
 505:Core/Src/main.c ****   GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 123              		.loc 1 505 3 view .LVU28
ARM GAS  C:\Users\CuongLe\AppData\Local\Temp\ccsxSNGX.s 			page 12


 124              		.loc 1 505 23 is_stmt 0 view .LVU29
 125 0072 4FF47043 		mov	r3, #61440
 126 0076 0593     		str	r3, [sp, #20]
 506:Core/Src/main.c ****   GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 127              		.loc 1 506 3 is_stmt 1 view .LVU30
 128              		.loc 1 506 24 is_stmt 0 view .LVU31
 129 0078 0123     		movs	r3, #1
 130 007a 0693     		str	r3, [sp, #24]
 507:Core/Src/main.c ****   GPIO_InitStruct.Pull = GPIO_NOPULL;
 131              		.loc 1 507 3 is_stmt 1 view .LVU32
 132              		.loc 1 507 24 is_stmt 0 view .LVU33
 133 007c 0794     		str	r4, [sp, #28]
 508:Core/Src/main.c ****   GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 134              		.loc 1 508 3 is_stmt 1 view .LVU34
 135              		.loc 1 508 25 is_stmt 0 view .LVU35
 136 007e 0894     		str	r4, [sp, #32]
 509:Core/Src/main.c ****   HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 137              		.loc 1 509 3 is_stmt 1 view .LVU36
 138 0080 2946     		mov	r1, r5
 139 0082 3046     		mov	r0, r6
 140 0084 FFF7FEFF 		bl	HAL_GPIO_Init
 141              	.LVL1:
 510:Core/Src/main.c **** 
 511:Core/Src/main.c **** /* USER CODE BEGIN MX_GPIO_Init_2 */
 512:Core/Src/main.c **** /* USER CODE END MX_GPIO_Init_2 */
 513:Core/Src/main.c **** }
 142              		.loc 1 513 1 is_stmt 0 view .LVU37
 143 0088 0AB0     		add	sp, sp, #40
 144              	.LCFI2:
 145              		.cfi_def_cfa_offset 16
 146              		@ sp needed
 147 008a 70BD     		pop	{r4, r5, r6, pc}
 148              	.L4:
 149              		.align	2
 150              	.L3:
 151 008c 00380240 		.word	1073887232
 152 0090 000C0240 		.word	1073875968
 153              		.cfi_endproc
 154              	.LFE297:
 156              		.section	.text.Error_Handler,"ax",%progbits
 157              		.align	1
 158              		.global	Error_Handler
 159              		.syntax unified
 160              		.thumb
 161              		.thumb_func
 163              	Error_Handler:
 164              	.LFB298:
 514:Core/Src/main.c **** 
 515:Core/Src/main.c **** /* USER CODE BEGIN 4 */
 516:Core/Src/main.c **** 
 517:Core/Src/main.c **** /* USER CODE END 4 */
 518:Core/Src/main.c **** 
 519:Core/Src/main.c **** /**
 520:Core/Src/main.c ****   * @brief  This function is executed in case of error occurrence.
 521:Core/Src/main.c ****   * @retval None
 522:Core/Src/main.c ****   */
 523:Core/Src/main.c **** void Error_Handler(void)
ARM GAS  C:\Users\CuongLe\AppData\Local\Temp\ccsxSNGX.s 			page 13


 524:Core/Src/main.c **** {
 165              		.loc 1 524 1 is_stmt 1 view -0
 166              		.cfi_startproc
 167              		@ Volatile: function does not return.
 168              		@ args = 0, pretend = 0, frame = 0
 169              		@ frame_needed = 0, uses_anonymous_args = 0
 170              		@ link register save eliminated.
 525:Core/Src/main.c ****   /* USER CODE BEGIN Error_Handler_Debug */
 526:Core/Src/main.c ****   /* User can add his own implementation to report the HAL error return state */
 527:Core/Src/main.c ****   __disable_irq();
 171              		.loc 1 527 3 view .LVU39
 172              	.LBB8:
 173              	.LBI8:
 174              		.file 2 "Drivers/CMSIS/Include/cmsis_gcc.h"
   1:Drivers/CMSIS/Include/cmsis_gcc.h **** /**************************************************************************//**
   2:Drivers/CMSIS/Include/cmsis_gcc.h ****  * @file     cmsis_gcc.h
   3:Drivers/CMSIS/Include/cmsis_gcc.h ****  * @brief    CMSIS compiler GCC header file
   4:Drivers/CMSIS/Include/cmsis_gcc.h ****  * @version  V5.4.1
   5:Drivers/CMSIS/Include/cmsis_gcc.h ****  * @date     27. May 2021
   6:Drivers/CMSIS/Include/cmsis_gcc.h ****  ******************************************************************************/
   7:Drivers/CMSIS/Include/cmsis_gcc.h **** /*
   8:Drivers/CMSIS/Include/cmsis_gcc.h ****  * Copyright (c) 2009-2021 Arm Limited. All rights reserved.
   9:Drivers/CMSIS/Include/cmsis_gcc.h ****  *
  10:Drivers/CMSIS/Include/cmsis_gcc.h ****  * SPDX-License-Identifier: Apache-2.0
  11:Drivers/CMSIS/Include/cmsis_gcc.h ****  *
  12:Drivers/CMSIS/Include/cmsis_gcc.h ****  * Licensed under the Apache License, Version 2.0 (the License); you may
  13:Drivers/CMSIS/Include/cmsis_gcc.h ****  * not use this file except in compliance with the License.
  14:Drivers/CMSIS/Include/cmsis_gcc.h ****  * You may obtain a copy of the License at
  15:Drivers/CMSIS/Include/cmsis_gcc.h ****  *
  16:Drivers/CMSIS/Include/cmsis_gcc.h ****  * www.apache.org/licenses/LICENSE-2.0
  17:Drivers/CMSIS/Include/cmsis_gcc.h ****  *
  18:Drivers/CMSIS/Include/cmsis_gcc.h ****  * Unless required by applicable law or agreed to in writing, software
  19:Drivers/CMSIS/Include/cmsis_gcc.h ****  * distributed under the License is distributed on an AS IS BASIS, WITHOUT
  20:Drivers/CMSIS/Include/cmsis_gcc.h ****  * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  21:Drivers/CMSIS/Include/cmsis_gcc.h ****  * See the License for the specific language governing permissions and
  22:Drivers/CMSIS/Include/cmsis_gcc.h ****  * limitations under the License.
  23:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
  24:Drivers/CMSIS/Include/cmsis_gcc.h **** 
  25:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef __CMSIS_GCC_H
  26:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __CMSIS_GCC_H
  27:Drivers/CMSIS/Include/cmsis_gcc.h **** 
  28:Drivers/CMSIS/Include/cmsis_gcc.h **** /* ignore some GCC warnings */
  29:Drivers/CMSIS/Include/cmsis_gcc.h **** #pragma GCC diagnostic push
  30:Drivers/CMSIS/Include/cmsis_gcc.h **** #pragma GCC diagnostic ignored "-Wsign-conversion"
  31:Drivers/CMSIS/Include/cmsis_gcc.h **** #pragma GCC diagnostic ignored "-Wconversion"
  32:Drivers/CMSIS/Include/cmsis_gcc.h **** #pragma GCC diagnostic ignored "-Wunused-parameter"
  33:Drivers/CMSIS/Include/cmsis_gcc.h **** 
  34:Drivers/CMSIS/Include/cmsis_gcc.h **** /* Fallback for __has_builtin */
  35:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef __has_builtin
  36:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __has_builtin(x) (0)
  37:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  38:Drivers/CMSIS/Include/cmsis_gcc.h **** 
  39:Drivers/CMSIS/Include/cmsis_gcc.h **** /* CMSIS compiler specific defines */
  40:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __ASM
  41:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __ASM                                  __asm
  42:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  43:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __INLINE
ARM GAS  C:\Users\CuongLe\AppData\Local\Temp\ccsxSNGX.s 			page 14


  44:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __INLINE                               inline
  45:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  46:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __STATIC_INLINE
  47:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __STATIC_INLINE                        static inline
  48:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  49:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __STATIC_FORCEINLINE
  50:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __STATIC_FORCEINLINE                   __attribute__((always_inline)) static inline
  51:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  52:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __NO_RETURN
  53:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __NO_RETURN                            __attribute__((__noreturn__))
  54:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  55:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __USED
  56:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __USED                                 __attribute__((used))
  57:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  58:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __WEAK
  59:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __WEAK                                 __attribute__((weak))
  60:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  61:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __PACKED
  62:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __PACKED                               __attribute__((packed, aligned(1)))
  63:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  64:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __PACKED_STRUCT
  65:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __PACKED_STRUCT                        struct __attribute__((packed, aligned(1)))
  66:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  67:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __PACKED_UNION
  68:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __PACKED_UNION                         union __attribute__((packed, aligned(1)))
  69:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  70:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __UNALIGNED_UINT32        /* deprecated */
  71:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic push
  72:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wpacked"
  73:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wattributes"
  74:Drivers/CMSIS/Include/cmsis_gcc.h ****   struct __attribute__((packed)) T_UINT32 { uint32_t v; };
  75:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic pop
  76:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __UNALIGNED_UINT32(x)                  (((struct T_UINT32 *)(x))->v)
  77:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  78:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __UNALIGNED_UINT16_WRITE
  79:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic push
  80:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wpacked"
  81:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wattributes"
  82:Drivers/CMSIS/Include/cmsis_gcc.h ****   __PACKED_STRUCT T_UINT16_WRITE { uint16_t v; };
  83:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic pop
  84:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __UNALIGNED_UINT16_WRITE(addr, val)    (void)((((struct T_UINT16_WRITE *)(void *)(addr))-
  85:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  86:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __UNALIGNED_UINT16_READ
  87:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic push
  88:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wpacked"
  89:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wattributes"
  90:Drivers/CMSIS/Include/cmsis_gcc.h ****   __PACKED_STRUCT T_UINT16_READ { uint16_t v; };
  91:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic pop
  92:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __UNALIGNED_UINT16_READ(addr)          (((const struct T_UINT16_READ *)(const void *)(add
  93:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  94:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __UNALIGNED_UINT32_WRITE
  95:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic push
  96:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wpacked"
  97:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wattributes"
  98:Drivers/CMSIS/Include/cmsis_gcc.h ****   __PACKED_STRUCT T_UINT32_WRITE { uint32_t v; };
  99:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic pop
 100:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __UNALIGNED_UINT32_WRITE(addr, val)    (void)((((struct T_UINT32_WRITE *)(void *)(addr))-
ARM GAS  C:\Users\CuongLe\AppData\Local\Temp\ccsxSNGX.s 			page 15


 101:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 102:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __UNALIGNED_UINT32_READ
 103:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic push
 104:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wpacked"
 105:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wattributes"
 106:Drivers/CMSIS/Include/cmsis_gcc.h ****   __PACKED_STRUCT T_UINT32_READ { uint32_t v; };
 107:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic pop
 108:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __UNALIGNED_UINT32_READ(addr)          (((const struct T_UINT32_READ *)(const void *)(add
 109:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 110:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __ALIGNED
 111:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __ALIGNED(x)                           __attribute__((aligned(x)))
 112:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 113:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __RESTRICT
 114:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __RESTRICT                             __restrict
 115:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 116:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __COMPILER_BARRIER
 117:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __COMPILER_BARRIER()                   __ASM volatile("":::"memory")
 118:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 119:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 120:Drivers/CMSIS/Include/cmsis_gcc.h **** /* #########################  Startup and Lowlevel Init  ######################## */
 121:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 122:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef __PROGRAM_START
 123:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 124:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 125:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Initializes data and bss sections
 126:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details This default implementations initialized all data and additional bss
 127:Drivers/CMSIS/Include/cmsis_gcc.h ****            sections relying on .copy.table and .zero.table specified properly
 128:Drivers/CMSIS/Include/cmsis_gcc.h ****            in the used linker script.
 129:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 130:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 131:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE __NO_RETURN void __cmsis_start(void)
 132:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 133:Drivers/CMSIS/Include/cmsis_gcc.h ****   extern void _start(void) __NO_RETURN;
 134:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 135:Drivers/CMSIS/Include/cmsis_gcc.h ****   typedef struct {
 136:Drivers/CMSIS/Include/cmsis_gcc.h ****     uint32_t const* src;
 137:Drivers/CMSIS/Include/cmsis_gcc.h ****     uint32_t* dest;
 138:Drivers/CMSIS/Include/cmsis_gcc.h ****     uint32_t  wlen;
 139:Drivers/CMSIS/Include/cmsis_gcc.h ****   } __copy_table_t;
 140:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 141:Drivers/CMSIS/Include/cmsis_gcc.h ****   typedef struct {
 142:Drivers/CMSIS/Include/cmsis_gcc.h ****     uint32_t* dest;
 143:Drivers/CMSIS/Include/cmsis_gcc.h ****     uint32_t  wlen;
 144:Drivers/CMSIS/Include/cmsis_gcc.h ****   } __zero_table_t;
 145:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 146:Drivers/CMSIS/Include/cmsis_gcc.h ****   extern const __copy_table_t __copy_table_start__;
 147:Drivers/CMSIS/Include/cmsis_gcc.h ****   extern const __copy_table_t __copy_table_end__;
 148:Drivers/CMSIS/Include/cmsis_gcc.h ****   extern const __zero_table_t __zero_table_start__;
 149:Drivers/CMSIS/Include/cmsis_gcc.h ****   extern const __zero_table_t __zero_table_end__;
 150:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 151:Drivers/CMSIS/Include/cmsis_gcc.h ****   for (__copy_table_t const* pTable = &__copy_table_start__; pTable < &__copy_table_end__; ++pTable
 152:Drivers/CMSIS/Include/cmsis_gcc.h ****     for(uint32_t i=0u; i<pTable->wlen; ++i) {
 153:Drivers/CMSIS/Include/cmsis_gcc.h ****       pTable->dest[i] = pTable->src[i];
 154:Drivers/CMSIS/Include/cmsis_gcc.h ****     }
 155:Drivers/CMSIS/Include/cmsis_gcc.h ****   }
 156:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 157:Drivers/CMSIS/Include/cmsis_gcc.h ****   for (__zero_table_t const* pTable = &__zero_table_start__; pTable < &__zero_table_end__; ++pTable
ARM GAS  C:\Users\CuongLe\AppData\Local\Temp\ccsxSNGX.s 			page 16


 158:Drivers/CMSIS/Include/cmsis_gcc.h ****     for(uint32_t i=0u; i<pTable->wlen; ++i) {
 159:Drivers/CMSIS/Include/cmsis_gcc.h ****       pTable->dest[i] = 0u;
 160:Drivers/CMSIS/Include/cmsis_gcc.h ****     }
 161:Drivers/CMSIS/Include/cmsis_gcc.h ****   }
 162:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 163:Drivers/CMSIS/Include/cmsis_gcc.h ****   _start();
 164:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 165:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 166:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __PROGRAM_START           __cmsis_start
 167:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 168:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 169:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef __INITIAL_SP
 170:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __INITIAL_SP              __StackTop
 171:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 172:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 173:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef __STACK_LIMIT
 174:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __STACK_LIMIT             __StackLimit
 175:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 176:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 177:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef __VECTOR_TABLE
 178:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __VECTOR_TABLE            __Vectors
 179:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 180:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 181:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef __VECTOR_TABLE_ATTRIBUTE
 182:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __VECTOR_TABLE_ATTRIBUTE  __attribute__((used, section(".vectors")))
 183:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 184:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 185:Drivers/CMSIS/Include/cmsis_gcc.h **** #if defined (__ARM_FEATURE_CMSE) && (__ARM_FEATURE_CMSE == 3U)
 186:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef __STACK_SEAL
 187:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __STACK_SEAL              __StackSeal
 188:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 189:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 190:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef __TZ_STACK_SEAL_SIZE
 191:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __TZ_STACK_SEAL_SIZE      8U
 192:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 193:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 194:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef __TZ_STACK_SEAL_VALUE
 195:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __TZ_STACK_SEAL_VALUE     0xFEF5EDA5FEF5EDA5ULL
 196:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 197:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 198:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 199:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __TZ_set_STACKSEAL_S (uint32_t* stackTop) {
 200:Drivers/CMSIS/Include/cmsis_gcc.h ****   *((uint64_t *)stackTop) = __TZ_STACK_SEAL_VALUE;
 201:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 202:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 203:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 204:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 205:Drivers/CMSIS/Include/cmsis_gcc.h **** /* ##########################  Core Instruction Access  ######################### */
 206:Drivers/CMSIS/Include/cmsis_gcc.h **** /** \defgroup CMSIS_Core_InstructionInterface CMSIS Core Instruction Interface
 207:Drivers/CMSIS/Include/cmsis_gcc.h ****   Access to dedicated instructions
 208:Drivers/CMSIS/Include/cmsis_gcc.h ****   @{
 209:Drivers/CMSIS/Include/cmsis_gcc.h **** */
 210:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 211:Drivers/CMSIS/Include/cmsis_gcc.h **** /* Define macros for porting to both thumb1 and thumb2.
 212:Drivers/CMSIS/Include/cmsis_gcc.h ****  * For thumb1, use low register (r0-r7), specified by constraint "l"
 213:Drivers/CMSIS/Include/cmsis_gcc.h ****  * Otherwise, use general registers, specified by constraint "r" */
 214:Drivers/CMSIS/Include/cmsis_gcc.h **** #if defined (__thumb__) && !defined (__thumb2__)
ARM GAS  C:\Users\CuongLe\AppData\Local\Temp\ccsxSNGX.s 			page 17


 215:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __CMSIS_GCC_OUT_REG(r) "=l" (r)
 216:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __CMSIS_GCC_RW_REG(r) "+l" (r)
 217:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __CMSIS_GCC_USE_REG(r) "l" (r)
 218:Drivers/CMSIS/Include/cmsis_gcc.h **** #else
 219:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __CMSIS_GCC_OUT_REG(r) "=r" (r)
 220:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __CMSIS_GCC_RW_REG(r) "+r" (r)
 221:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __CMSIS_GCC_USE_REG(r) "r" (r)
 222:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 223:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 224:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 225:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   No Operation
 226:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details No Operation does nothing. This instruction can be used for code alignment purposes.
 227:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 228:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __NOP()                             __ASM volatile ("nop")
 229:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 230:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 231:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Wait For Interrupt
 232:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Wait For Interrupt is a hint instruction that suspends execution until one of a number o
 233:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 234:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __WFI()                             __ASM volatile ("wfi":::"memory")
 235:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 236:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 237:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 238:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Wait For Event
 239:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Wait For Event is a hint instruction that permits the processor to enter
 240:Drivers/CMSIS/Include/cmsis_gcc.h ****            a low-power state until one of a number of events occurs.
 241:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 242:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __WFE()                             __ASM volatile ("wfe":::"memory")
 243:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 244:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 245:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 246:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Send Event
 247:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Send Event is a hint instruction. It causes an event to be signaled to the CPU.
 248:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 249:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __SEV()                             __ASM volatile ("sev")
 250:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 251:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 252:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 253:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Instruction Synchronization Barrier
 254:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Instruction Synchronization Barrier flushes the pipeline in the processor,
 255:Drivers/CMSIS/Include/cmsis_gcc.h ****            so that all instructions following the ISB are fetched from cache or memory,
 256:Drivers/CMSIS/Include/cmsis_gcc.h ****            after the instruction has been completed.
 257:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 258:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __ISB(void)
 259:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 260:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("isb 0xF":::"memory");
 261:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 262:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 263:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 264:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 265:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Data Synchronization Barrier
 266:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Acts as a special kind of Data Memory Barrier.
 267:Drivers/CMSIS/Include/cmsis_gcc.h ****            It completes when all explicit memory accesses before this instruction complete.
 268:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 269:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __DSB(void)
 270:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 271:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("dsb 0xF":::"memory");
ARM GAS  C:\Users\CuongLe\AppData\Local\Temp\ccsxSNGX.s 			page 18


 272:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 273:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 274:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 275:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 276:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Data Memory Barrier
 277:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Ensures the apparent order of the explicit memory operations before
 278:Drivers/CMSIS/Include/cmsis_gcc.h ****            and after the instruction, without ensuring their completion.
 279:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 280:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __DMB(void)
 281:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 282:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("dmb 0xF":::"memory");
 283:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 284:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 285:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 286:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 287:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Reverse byte order (32 bit)
 288:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Reverses the byte order in unsigned integer value. For example, 0x12345678 becomes 0x785
 289:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    value  Value to reverse
 290:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return               Reversed value
 291:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 292:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __REV(uint32_t value)
 293:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 294:Drivers/CMSIS/Include/cmsis_gcc.h **** #if (__GNUC__ > 4) || (__GNUC__ == 4 && __GNUC_MINOR__ >= 5)
 295:Drivers/CMSIS/Include/cmsis_gcc.h ****   return __builtin_bswap32(value);
 296:Drivers/CMSIS/Include/cmsis_gcc.h **** #else
 297:Drivers/CMSIS/Include/cmsis_gcc.h ****   uint32_t result;
 298:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 299:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM ("rev %0, %1" : __CMSIS_GCC_OUT_REG (result) : __CMSIS_GCC_USE_REG (value) );
 300:Drivers/CMSIS/Include/cmsis_gcc.h ****   return result;
 301:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 302:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 303:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 304:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 305:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 306:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Reverse byte order (16 bit)
 307:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Reverses the byte order within each halfword of a word. For example, 0x12345678 becomes 
 308:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    value  Value to reverse
 309:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return               Reversed value
 310:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 311:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __REV16(uint32_t value)
 312:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 313:Drivers/CMSIS/Include/cmsis_gcc.h ****   uint32_t result;
 314:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 315:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM ("rev16 %0, %1" : __CMSIS_GCC_OUT_REG (result) : __CMSIS_GCC_USE_REG (value) );
 316:Drivers/CMSIS/Include/cmsis_gcc.h ****   return result;
 317:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 318:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 319:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 320:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 321:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Reverse byte order (16 bit)
 322:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Reverses the byte order in a 16-bit value and returns the signed 16-bit result. For exam
 323:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    value  Value to reverse
 324:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return               Reversed value
 325:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 326:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE int16_t __REVSH(int16_t value)
 327:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 328:Drivers/CMSIS/Include/cmsis_gcc.h **** #if (__GNUC__ > 4) || (__GNUC__ == 4 && __GNUC_MINOR__ >= 8)
ARM GAS  C:\Users\CuongLe\AppData\Local\Temp\ccsxSNGX.s 			page 19


 329:Drivers/CMSIS/Include/cmsis_gcc.h ****   return (int16_t)__builtin_bswap16(value);
 330:Drivers/CMSIS/Include/cmsis_gcc.h **** #else
 331:Drivers/CMSIS/Include/cmsis_gcc.h ****   int16_t result;
 332:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 333:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM ("revsh %0, %1" : __CMSIS_GCC_OUT_REG (result) : __CMSIS_GCC_USE_REG (value) );
 334:Drivers/CMSIS/Include/cmsis_gcc.h ****   return result;
 335:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 336:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 337:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 338:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 339:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 340:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Rotate Right in unsigned value (32 bit)
 341:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Rotate Right (immediate) provides the value of the contents of a register rotated by a v
 342:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    op1  Value to rotate
 343:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    op2  Number of Bits to rotate
 344:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return               Rotated value
 345:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 346:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __ROR(uint32_t op1, uint32_t op2)
 347:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 348:Drivers/CMSIS/Include/cmsis_gcc.h ****   op2 %= 32U;
 349:Drivers/CMSIS/Include/cmsis_gcc.h ****   if (op2 == 0U)
 350:Drivers/CMSIS/Include/cmsis_gcc.h ****   {
 351:Drivers/CMSIS/Include/cmsis_gcc.h ****     return op1;
 352:Drivers/CMSIS/Include/cmsis_gcc.h ****   }
 353:Drivers/CMSIS/Include/cmsis_gcc.h ****   return (op1 >> op2) | (op1 << (32U - op2));
 354:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 355:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 356:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 357:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 358:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Breakpoint
 359:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Causes the processor to enter Debug state.
 360:Drivers/CMSIS/Include/cmsis_gcc.h ****            Debug tools can use this to investigate system state when the instruction at a particula
 361:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    value  is ignored by the processor.
 362:Drivers/CMSIS/Include/cmsis_gcc.h ****                  If required, a debugger can use it to store additional information about the break
 363:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 364:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __BKPT(value)                       __ASM volatile ("bkpt "#value)
 365:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 366:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 367:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 368:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Reverse bit order of value
 369:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Reverses the bit order of the given value.
 370:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    value  Value to reverse
 371:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return               Reversed value
 372:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 373:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __RBIT(uint32_t value)
 374:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 375:Drivers/CMSIS/Include/cmsis_gcc.h ****   uint32_t result;
 376:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 377:Drivers/CMSIS/Include/cmsis_gcc.h **** #if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
 378:Drivers/CMSIS/Include/cmsis_gcc.h ****      (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
 379:Drivers/CMSIS/Include/cmsis_gcc.h ****      (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
 380:Drivers/CMSIS/Include/cmsis_gcc.h ****    __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 381:Drivers/CMSIS/Include/cmsis_gcc.h **** #else
 382:Drivers/CMSIS/Include/cmsis_gcc.h ****   uint32_t s = (4U /*sizeof(v)*/ * 8U) - 1U; /* extra shift needed at end */
 383:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 384:Drivers/CMSIS/Include/cmsis_gcc.h ****   result = value;                      /* r will be reversed bits of v; first get LSB of v */
 385:Drivers/CMSIS/Include/cmsis_gcc.h ****   for (value >>= 1U; value != 0U; value >>= 1U)
ARM GAS  C:\Users\CuongLe\AppData\Local\Temp\ccsxSNGX.s 			page 20


 386:Drivers/CMSIS/Include/cmsis_gcc.h ****   {
 387:Drivers/CMSIS/Include/cmsis_gcc.h ****     result <<= 1U;
 388:Drivers/CMSIS/Include/cmsis_gcc.h ****     result |= value & 1U;
 389:Drivers/CMSIS/Include/cmsis_gcc.h ****     s--;
 390:Drivers/CMSIS/Include/cmsis_gcc.h ****   }
 391:Drivers/CMSIS/Include/cmsis_gcc.h ****   result <<= s;                        /* shift when v's highest bits are zero */
 392:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 393:Drivers/CMSIS/Include/cmsis_gcc.h ****   return result;
 394:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 395:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 396:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 397:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 398:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Count leading zeros
 399:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Counts the number of leading zeros of a data value.
 400:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]  value  Value to count the leading zeros
 401:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return             number of leading zeros in value
 402:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 403:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint8_t __CLZ(uint32_t value)
 404:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 405:Drivers/CMSIS/Include/cmsis_gcc.h ****   /* Even though __builtin_clz produces a CLZ instruction on ARM, formally
 406:Drivers/CMSIS/Include/cmsis_gcc.h ****      __builtin_clz(0) is undefined behaviour, so handle this case specially.
 407:Drivers/CMSIS/Include/cmsis_gcc.h ****      This guarantees ARM-compatible results if happening to compile on a non-ARM
 408:Drivers/CMSIS/Include/cmsis_gcc.h ****      target, and ensures the compiler doesn't decide to activate any
 409:Drivers/CMSIS/Include/cmsis_gcc.h ****      optimisations using the logic "value was passed to __builtin_clz, so it
 410:Drivers/CMSIS/Include/cmsis_gcc.h ****      is non-zero".
 411:Drivers/CMSIS/Include/cmsis_gcc.h ****      ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
 412:Drivers/CMSIS/Include/cmsis_gcc.h ****      single CLZ instruction.
 413:Drivers/CMSIS/Include/cmsis_gcc.h ****    */
 414:Drivers/CMSIS/Include/cmsis_gcc.h ****   if (value == 0U)
 415:Drivers/CMSIS/Include/cmsis_gcc.h ****   {
 416:Drivers/CMSIS/Include/cmsis_gcc.h ****     return 32U;
 417:Drivers/CMSIS/Include/cmsis_gcc.h ****   }
 418:Drivers/CMSIS/Include/cmsis_gcc.h ****   return __builtin_clz(value);
 419:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 420:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 421:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 422:Drivers/CMSIS/Include/cmsis_gcc.h **** #if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
 423:Drivers/CMSIS/Include/cmsis_gcc.h ****      (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
 424:Drivers/CMSIS/Include/cmsis_gcc.h ****      (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1)) || \
 425:Drivers/CMSIS/Include/cmsis_gcc.h ****      (defined (__ARM_ARCH_8M_BASE__ ) && (__ARM_ARCH_8M_BASE__ == 1))    )
 426:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 427:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   LDR Exclusive (8 bit)
 428:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Executes a exclusive LDR instruction for 8 bit value.
 429:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    ptr  Pointer to data
 430:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return             value of type uint8_t at (*ptr)
 431:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 432:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint8_t __LDREXB(volatile uint8_t *addr)
 433:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 434:Drivers/CMSIS/Include/cmsis_gcc.h ****     uint32_t result;
 435:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 436:Drivers/CMSIS/Include/cmsis_gcc.h **** #if (__GNUC__ > 4) || (__GNUC__ == 4 && __GNUC_MINOR__ >= 8)
 437:Drivers/CMSIS/Include/cmsis_gcc.h ****    __ASM volatile ("ldrexb %0, %1" : "=r" (result) : "Q" (*addr) );
 438:Drivers/CMSIS/Include/cmsis_gcc.h **** #else
 439:Drivers/CMSIS/Include/cmsis_gcc.h ****     /* Prior to GCC 4.8, "Q" will be expanded to [rx, #0] which is not
 440:Drivers/CMSIS/Include/cmsis_gcc.h ****        accepted by assembler. So has to use following less efficient pattern.
 441:Drivers/CMSIS/Include/cmsis_gcc.h ****     */
 442:Drivers/CMSIS/Include/cmsis_gcc.h ****    __ASM volatile ("ldrexb %0, [%1]" : "=r" (result) : "r" (addr) : "memory" );
ARM GAS  C:\Users\CuongLe\AppData\Local\Temp\ccsxSNGX.s 			page 21


 443:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 444:Drivers/CMSIS/Include/cmsis_gcc.h ****    return ((uint8_t) result);    /* Add explicit type cast here */
 445:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 446:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 447:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 448:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 449:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   LDR Exclusive (16 bit)
 450:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Executes a exclusive LDR instruction for 16 bit values.
 451:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    ptr  Pointer to data
 452:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return        value of type uint16_t at (*ptr)
 453:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 454:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint16_t __LDREXH(volatile uint16_t *addr)
 455:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 456:Drivers/CMSIS/Include/cmsis_gcc.h ****     uint32_t result;
 457:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 458:Drivers/CMSIS/Include/cmsis_gcc.h **** #if (__GNUC__ > 4) || (__GNUC__ == 4 && __GNUC_MINOR__ >= 8)
 459:Drivers/CMSIS/Include/cmsis_gcc.h ****    __ASM volatile ("ldrexh %0, %1" : "=r" (result) : "Q" (*addr) );
 460:Drivers/CMSIS/Include/cmsis_gcc.h **** #else
 461:Drivers/CMSIS/Include/cmsis_gcc.h ****     /* Prior to GCC 4.8, "Q" will be expanded to [rx, #0] which is not
 462:Drivers/CMSIS/Include/cmsis_gcc.h ****        accepted by assembler. So has to use following less efficient pattern.
 463:Drivers/CMSIS/Include/cmsis_gcc.h ****     */
 464:Drivers/CMSIS/Include/cmsis_gcc.h ****    __ASM volatile ("ldrexh %0, [%1]" : "=r" (result) : "r" (addr) : "memory" );
 465:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 466:Drivers/CMSIS/Include/cmsis_gcc.h ****    return ((uint16_t) result);    /* Add explicit type cast here */
 467:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 468:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 469:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 470:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 471:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   LDR Exclusive (32 bit)
 472:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Executes a exclusive LDR instruction for 32 bit values.
 473:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    ptr  Pointer to data
 474:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return        value of type uint32_t at (*ptr)
 475:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 476:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
 477:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 478:Drivers/CMSIS/Include/cmsis_gcc.h ****     uint32_t result;
 479:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 480:Drivers/CMSIS/Include/cmsis_gcc.h ****    __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 481:Drivers/CMSIS/Include/cmsis_gcc.h ****    return(result);
 482:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 483:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 484:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 485:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 486:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   STR Exclusive (8 bit)
 487:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Executes a exclusive STR instruction for 8 bit values.
 488:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]  value  Value to store
 489:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    ptr  Pointer to location
 490:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return          0  Function succeeded
 491:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return          1  Function failed
 492:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 493:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __STREXB(uint8_t value, volatile uint8_t *addr)
 494:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 495:Drivers/CMSIS/Include/cmsis_gcc.h ****    uint32_t result;
 496:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 497:Drivers/CMSIS/Include/cmsis_gcc.h ****    __ASM volatile ("strexb %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" ((uint32_t)value) );
 498:Drivers/CMSIS/Include/cmsis_gcc.h ****    return(result);
 499:Drivers/CMSIS/Include/cmsis_gcc.h **** }
ARM GAS  C:\Users\CuongLe\AppData\Local\Temp\ccsxSNGX.s 			page 22


 500:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 501:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 502:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 503:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   STR Exclusive (16 bit)
 504:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Executes a exclusive STR instruction for 16 bit values.
 505:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]  value  Value to store
 506:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    ptr  Pointer to location
 507:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return          0  Function succeeded
 508:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return          1  Function failed
 509:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 510:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __STREXH(uint16_t value, volatile uint16_t *addr)
 511:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 512:Drivers/CMSIS/Include/cmsis_gcc.h ****    uint32_t result;
 513:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 514:Drivers/CMSIS/Include/cmsis_gcc.h ****    __ASM volatile ("strexh %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" ((uint32_t)value) );
 515:Drivers/CMSIS/Include/cmsis_gcc.h ****    return(result);
 516:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 517:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 518:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 519:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 520:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   STR Exclusive (32 bit)
 521:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Executes a exclusive STR instruction for 32 bit values.
 522:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]  value  Value to store
 523:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    ptr  Pointer to location
 524:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return          0  Function succeeded
 525:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return          1  Function failed
 526:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 527:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
 528:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 529:Drivers/CMSIS/Include/cmsis_gcc.h ****    uint32_t result;
 530:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 531:Drivers/CMSIS/Include/cmsis_gcc.h ****    __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 532:Drivers/CMSIS/Include/cmsis_gcc.h ****    return(result);
 533:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 534:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 535:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 536:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 537:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Remove the exclusive lock
 538:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Removes the exclusive lock which is created by LDREX.
 539:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 540:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __CLREX(void)
 541:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 542:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("clrex" ::: "memory");
 543:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 544:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 545:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif /* ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
 546:Drivers/CMSIS/Include/cmsis_gcc.h ****            (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
 547:Drivers/CMSIS/Include/cmsis_gcc.h ****            (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1)) || \
 548:Drivers/CMSIS/Include/cmsis_gcc.h ****            (defined (__ARM_ARCH_8M_BASE__ ) && (__ARM_ARCH_8M_BASE__ == 1))    ) */
 549:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 550:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 551:Drivers/CMSIS/Include/cmsis_gcc.h **** #if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
 552:Drivers/CMSIS/Include/cmsis_gcc.h ****      (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
 553:Drivers/CMSIS/Include/cmsis_gcc.h ****      (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
 554:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 555:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Signed Saturate
 556:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Saturates a signed value.
ARM GAS  C:\Users\CuongLe\AppData\Local\Temp\ccsxSNGX.s 			page 23


 557:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]  ARG1  Value to be saturated
 558:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]  ARG2  Bit position to saturate to (1..32)
 559:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return             Saturated value
 560:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 561:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __SSAT(ARG1, ARG2) \
 562:Drivers/CMSIS/Include/cmsis_gcc.h **** __extension__ \
 563:Drivers/CMSIS/Include/cmsis_gcc.h **** ({                          \
 564:Drivers/CMSIS/Include/cmsis_gcc.h ****   int32_t __RES, __ARG1 = (ARG1); \
 565:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("ssat %0, %1, %2" : "=r" (__RES) :  "I" (ARG2), "r" (__ARG1) : "cc" ); \
 566:Drivers/CMSIS/Include/cmsis_gcc.h ****   __RES; \
 567:Drivers/CMSIS/Include/cmsis_gcc.h ****  })
 568:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 569:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 570:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 571:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Unsigned Saturate
 572:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Saturates an unsigned value.
 573:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]  ARG1  Value to be saturated
 574:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]  ARG2  Bit position to saturate to (0..31)
 575:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return             Saturated value
 576:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 577:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __USAT(ARG1, ARG2) \
 578:Drivers/CMSIS/Include/cmsis_gcc.h **** __extension__ \
 579:Drivers/CMSIS/Include/cmsis_gcc.h **** ({                          \
 580:Drivers/CMSIS/Include/cmsis_gcc.h ****   uint32_t __RES, __ARG1 = (ARG1); \
 581:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("usat %0, %1, %2" : "=r" (__RES) :  "I" (ARG2), "r" (__ARG1) : "cc" ); \
 582:Drivers/CMSIS/Include/cmsis_gcc.h ****   __RES; \
 583:Drivers/CMSIS/Include/cmsis_gcc.h ****  })
 584:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 585:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 586:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 587:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Rotate Right with Extend (32 bit)
 588:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Moves each bit of a bitstring right by one bit.
 589:Drivers/CMSIS/Include/cmsis_gcc.h ****            The carry input is shifted in at the left end of the bitstring.
 590:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    value  Value to rotate
 591:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return               Rotated value
 592:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 593:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __RRX(uint32_t value)
 594:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 595:Drivers/CMSIS/Include/cmsis_gcc.h ****   uint32_t result;
 596:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 597:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("rrx %0, %1" : __CMSIS_GCC_OUT_REG (result) : __CMSIS_GCC_USE_REG (value) );
 598:Drivers/CMSIS/Include/cmsis_gcc.h ****   return(result);
 599:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 600:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 601:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 602:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 603:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   LDRT Unprivileged (8 bit)
 604:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Executes a Unprivileged LDRT instruction for 8 bit value.
 605:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    ptr  Pointer to data
 606:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return             value of type uint8_t at (*ptr)
 607:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 608:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint8_t __LDRBT(volatile uint8_t *ptr)
 609:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 610:Drivers/CMSIS/Include/cmsis_gcc.h ****     uint32_t result;
 611:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 612:Drivers/CMSIS/Include/cmsis_gcc.h **** #if (__GNUC__ > 4) || (__GNUC__ == 4 && __GNUC_MINOR__ >= 8)
 613:Drivers/CMSIS/Include/cmsis_gcc.h ****    __ASM volatile ("ldrbt %0, %1" : "=r" (result) : "Q" (*ptr) );
ARM GAS  C:\Users\CuongLe\AppData\Local\Temp\ccsxSNGX.s 			page 24


 614:Drivers/CMSIS/Include/cmsis_gcc.h **** #else
 615:Drivers/CMSIS/Include/cmsis_gcc.h ****     /* Prior to GCC 4.8, "Q" will be expanded to [rx, #0] which is not
 616:Drivers/CMSIS/Include/cmsis_gcc.h ****        accepted by assembler. So has to use following less efficient pattern.
 617:Drivers/CMSIS/Include/cmsis_gcc.h ****     */
 618:Drivers/CMSIS/Include/cmsis_gcc.h ****    __ASM volatile ("ldrbt %0, [%1]" : "=r" (result) : "r" (ptr) : "memory" );
 619:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 620:Drivers/CMSIS/Include/cmsis_gcc.h ****    return ((uint8_t) result);    /* Add explicit type cast here */
 621:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 622:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 623:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 624:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 625:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   LDRT Unprivileged (16 bit)
 626:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Executes a Unprivileged LDRT instruction for 16 bit values.
 627:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    ptr  Pointer to data
 628:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return        value of type uint16_t at (*ptr)
 629:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 630:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint16_t __LDRHT(volatile uint16_t *ptr)
 631:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 632:Drivers/CMSIS/Include/cmsis_gcc.h ****     uint32_t result;
 633:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 634:Drivers/CMSIS/Include/cmsis_gcc.h **** #if (__GNUC__ > 4) || (__GNUC__ == 4 && __GNUC_MINOR__ >= 8)
 635:Drivers/CMSIS/Include/cmsis_gcc.h ****    __ASM volatile ("ldrht %0, %1" : "=r" (result) : "Q" (*ptr) );
 636:Drivers/CMSIS/Include/cmsis_gcc.h **** #else
 637:Drivers/CMSIS/Include/cmsis_gcc.h ****     /* Prior to GCC 4.8, "Q" will be expanded to [rx, #0] which is not
 638:Drivers/CMSIS/Include/cmsis_gcc.h ****        accepted by assembler. So has to use following less efficient pattern.
 639:Drivers/CMSIS/Include/cmsis_gcc.h ****     */
 640:Drivers/CMSIS/Include/cmsis_gcc.h ****    __ASM volatile ("ldrht %0, [%1]" : "=r" (result) : "r" (ptr) : "memory" );
 641:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 642:Drivers/CMSIS/Include/cmsis_gcc.h ****    return ((uint16_t) result);    /* Add explicit type cast here */
 643:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 644:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 645:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 646:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 647:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   LDRT Unprivileged (32 bit)
 648:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Executes a Unprivileged LDRT instruction for 32 bit values.
 649:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    ptr  Pointer to data
 650:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return        value of type uint32_t at (*ptr)
 651:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 652:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __LDRT(volatile uint32_t *ptr)
 653:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 654:Drivers/CMSIS/Include/cmsis_gcc.h ****     uint32_t result;
 655:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 656:Drivers/CMSIS/Include/cmsis_gcc.h ****    __ASM volatile ("ldrt %0, %1" : "=r" (result) : "Q" (*ptr) );
 657:Drivers/CMSIS/Include/cmsis_gcc.h ****    return(result);
 658:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 659:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 660:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 661:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 662:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   STRT Unprivileged (8 bit)
 663:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Executes a Unprivileged STRT instruction for 8 bit values.
 664:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]  value  Value to store
 665:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    ptr  Pointer to location
 666:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 667:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __STRBT(uint8_t value, volatile uint8_t *ptr)
 668:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 669:Drivers/CMSIS/Include/cmsis_gcc.h ****    __ASM volatile ("strbt %1, %0" : "=Q" (*ptr) : "r" ((uint32_t)value) );
 670:Drivers/CMSIS/Include/cmsis_gcc.h **** }
ARM GAS  C:\Users\CuongLe\AppData\Local\Temp\ccsxSNGX.s 			page 25


 671:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 672:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 673:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 674:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   STRT Unprivileged (16 bit)
 675:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Executes a Unprivileged STRT instruction for 16 bit values.
 676:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]  value  Value to store
 677:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    ptr  Pointer to location
 678:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 679:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __STRHT(uint16_t value, volatile uint16_t *ptr)
 680:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 681:Drivers/CMSIS/Include/cmsis_gcc.h ****    __ASM volatile ("strht %1, %0" : "=Q" (*ptr) : "r" ((uint32_t)value) );
 682:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 683:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 684:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 685:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 686:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   STRT Unprivileged (32 bit)
 687:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Executes a Unprivileged STRT instruction for 32 bit values.
 688:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]  value  Value to store
 689:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    ptr  Pointer to location
 690:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 691:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __STRT(uint32_t value, volatile uint32_t *ptr)
 692:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 693:Drivers/CMSIS/Include/cmsis_gcc.h ****    __ASM volatile ("strt %1, %0" : "=Q" (*ptr) : "r" (value) );
 694:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 695:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 696:Drivers/CMSIS/Include/cmsis_gcc.h **** #else  /* ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
 697:Drivers/CMSIS/Include/cmsis_gcc.h ****            (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
 698:Drivers/CMSIS/Include/cmsis_gcc.h ****            (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    ) */
 699:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 700:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 701:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Signed Saturate
 702:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Saturates a signed value.
 703:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]  value  Value to be saturated
 704:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    sat  Bit position to saturate to (1..32)
 705:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return             Saturated value
 706:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 707:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE int32_t __SSAT(int32_t val, uint32_t sat)
 708:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 709:Drivers/CMSIS/Include/cmsis_gcc.h ****   if ((sat >= 1U) && (sat <= 32U))
 710:Drivers/CMSIS/Include/cmsis_gcc.h ****   {
 711:Drivers/CMSIS/Include/cmsis_gcc.h ****     const int32_t max = (int32_t)((1U << (sat - 1U)) - 1U);
 712:Drivers/CMSIS/Include/cmsis_gcc.h ****     const int32_t min = -1 - max ;
 713:Drivers/CMSIS/Include/cmsis_gcc.h ****     if (val > max)
 714:Drivers/CMSIS/Include/cmsis_gcc.h ****     {
 715:Drivers/CMSIS/Include/cmsis_gcc.h ****       return max;
 716:Drivers/CMSIS/Include/cmsis_gcc.h ****     }
 717:Drivers/CMSIS/Include/cmsis_gcc.h ****     else if (val < min)
 718:Drivers/CMSIS/Include/cmsis_gcc.h ****     {
 719:Drivers/CMSIS/Include/cmsis_gcc.h ****       return min;
 720:Drivers/CMSIS/Include/cmsis_gcc.h ****     }
 721:Drivers/CMSIS/Include/cmsis_gcc.h ****   }
 722:Drivers/CMSIS/Include/cmsis_gcc.h ****   return val;
 723:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 724:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 725:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 726:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Unsigned Saturate
 727:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Saturates an unsigned value.
ARM GAS  C:\Users\CuongLe\AppData\Local\Temp\ccsxSNGX.s 			page 26


 728:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]  value  Value to be saturated
 729:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    sat  Bit position to saturate to (0..31)
 730:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return             Saturated value
 731:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 732:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __USAT(int32_t val, uint32_t sat)
 733:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 734:Drivers/CMSIS/Include/cmsis_gcc.h ****   if (sat <= 31U)
 735:Drivers/CMSIS/Include/cmsis_gcc.h ****   {
 736:Drivers/CMSIS/Include/cmsis_gcc.h ****     const uint32_t max = ((1U << sat) - 1U);
 737:Drivers/CMSIS/Include/cmsis_gcc.h ****     if (val > (int32_t)max)
 738:Drivers/CMSIS/Include/cmsis_gcc.h ****     {
 739:Drivers/CMSIS/Include/cmsis_gcc.h ****       return max;
 740:Drivers/CMSIS/Include/cmsis_gcc.h ****     }
 741:Drivers/CMSIS/Include/cmsis_gcc.h ****     else if (val < 0)
 742:Drivers/CMSIS/Include/cmsis_gcc.h ****     {
 743:Drivers/CMSIS/Include/cmsis_gcc.h ****       return 0U;
 744:Drivers/CMSIS/Include/cmsis_gcc.h ****     }
 745:Drivers/CMSIS/Include/cmsis_gcc.h ****   }
 746:Drivers/CMSIS/Include/cmsis_gcc.h ****   return (uint32_t)val;
 747:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 748:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 749:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif /* ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
 750:Drivers/CMSIS/Include/cmsis_gcc.h ****            (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
 751:Drivers/CMSIS/Include/cmsis_gcc.h ****            (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    ) */
 752:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 753:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 754:Drivers/CMSIS/Include/cmsis_gcc.h **** #if ((defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1)) || \
 755:Drivers/CMSIS/Include/cmsis_gcc.h ****      (defined (__ARM_ARCH_8M_BASE__ ) && (__ARM_ARCH_8M_BASE__ == 1))    )
 756:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 757:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Load-Acquire (8 bit)
 758:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Executes a LDAB instruction for 8 bit value.
 759:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    ptr  Pointer to data
 760:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return             value of type uint8_t at (*ptr)
 761:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 762:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint8_t __LDAB(volatile uint8_t *ptr)
 763:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 764:Drivers/CMSIS/Include/cmsis_gcc.h ****     uint32_t result;
 765:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 766:Drivers/CMSIS/Include/cmsis_gcc.h ****    __ASM volatile ("ldab %0, %1" : "=r" (result) : "Q" (*ptr) : "memory" );
 767:Drivers/CMSIS/Include/cmsis_gcc.h ****    return ((uint8_t) result);
 768:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 769:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 770:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 771:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 772:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Load-Acquire (16 bit)
 773:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Executes a LDAH instruction for 16 bit values.
 774:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    ptr  Pointer to data
 775:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return        value of type uint16_t at (*ptr)
 776:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 777:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint16_t __LDAH(volatile uint16_t *ptr)
 778:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 779:Drivers/CMSIS/Include/cmsis_gcc.h ****     uint32_t result;
 780:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 781:Drivers/CMSIS/Include/cmsis_gcc.h ****    __ASM volatile ("ldah %0, %1" : "=r" (result) : "Q" (*ptr) : "memory" );
 782:Drivers/CMSIS/Include/cmsis_gcc.h ****    return ((uint16_t) result);
 783:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 784:Drivers/CMSIS/Include/cmsis_gcc.h **** 
ARM GAS  C:\Users\CuongLe\AppData\Local\Temp\ccsxSNGX.s 			page 27


 785:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 786:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 787:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Load-Acquire (32 bit)
 788:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Executes a LDA instruction for 32 bit values.
 789:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    ptr  Pointer to data
 790:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return        value of type uint32_t at (*ptr)
 791:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 792:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __LDA(volatile uint32_t *ptr)
 793:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 794:Drivers/CMSIS/Include/cmsis_gcc.h ****     uint32_t result;
 795:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 796:Drivers/CMSIS/Include/cmsis_gcc.h ****    __ASM volatile ("lda %0, %1" : "=r" (result) : "Q" (*ptr) : "memory" );
 797:Drivers/CMSIS/Include/cmsis_gcc.h ****    return(result);
 798:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 799:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 800:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 801:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 802:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Store-Release (8 bit)
 803:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Executes a STLB instruction for 8 bit values.
 804:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]  value  Value to store
 805:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    ptr  Pointer to location
 806:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 807:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __STLB(uint8_t value, volatile uint8_t *ptr)
 808:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 809:Drivers/CMSIS/Include/cmsis_gcc.h ****    __ASM volatile ("stlb %1, %0" : "=Q" (*ptr) : "r" ((uint32_t)value) : "memory" );
 810:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 811:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 812:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 813:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 814:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Store-Release (16 bit)
 815:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Executes a STLH instruction for 16 bit values.
 816:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]  value  Value to store
 817:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    ptr  Pointer to location
 818:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 819:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __STLH(uint16_t value, volatile uint16_t *ptr)
 820:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 821:Drivers/CMSIS/Include/cmsis_gcc.h ****    __ASM volatile ("stlh %1, %0" : "=Q" (*ptr) : "r" ((uint32_t)value) : "memory" );
 822:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 823:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 824:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 825:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 826:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Store-Release (32 bit)
 827:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Executes a STL instruction for 32 bit values.
 828:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]  value  Value to store
 829:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    ptr  Pointer to location
 830:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 831:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __STL(uint32_t value, volatile uint32_t *ptr)
 832:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 833:Drivers/CMSIS/Include/cmsis_gcc.h ****    __ASM volatile ("stl %1, %0" : "=Q" (*ptr) : "r" ((uint32_t)value) : "memory" );
 834:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 835:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 836:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 837:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 838:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Load-Acquire Exclusive (8 bit)
 839:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Executes a LDAB exclusive instruction for 8 bit value.
 840:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    ptr  Pointer to data
 841:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return             value of type uint8_t at (*ptr)
ARM GAS  C:\Users\CuongLe\AppData\Local\Temp\ccsxSNGX.s 			page 28


 842:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 843:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint8_t __LDAEXB(volatile uint8_t *ptr)
 844:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 845:Drivers/CMSIS/Include/cmsis_gcc.h ****     uint32_t result;
 846:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 847:Drivers/CMSIS/Include/cmsis_gcc.h ****    __ASM volatile ("ldaexb %0, %1" : "=r" (result) : "Q" (*ptr) : "memory" );
 848:Drivers/CMSIS/Include/cmsis_gcc.h ****    return ((uint8_t) result);
 849:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 850:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 851:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 852:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 853:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Load-Acquire Exclusive (16 bit)
 854:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Executes a LDAH exclusive instruction for 16 bit values.
 855:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    ptr  Pointer to data
 856:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return        value of type uint16_t at (*ptr)
 857:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 858:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint16_t __LDAEXH(volatile uint16_t *ptr)
 859:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 860:Drivers/CMSIS/Include/cmsis_gcc.h ****     uint32_t result;
 861:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 862:Drivers/CMSIS/Include/cmsis_gcc.h ****    __ASM volatile ("ldaexh %0, %1" : "=r" (result) : "Q" (*ptr) : "memory" );
 863:Drivers/CMSIS/Include/cmsis_gcc.h ****    return ((uint16_t) result);
 864:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 865:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 866:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 867:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 868:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Load-Acquire Exclusive (32 bit)
 869:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Executes a LDA exclusive instruction for 32 bit values.
 870:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    ptr  Pointer to data
 871:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return        value of type uint32_t at (*ptr)
 872:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 873:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __LDAEX(volatile uint32_t *ptr)
 874:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 875:Drivers/CMSIS/Include/cmsis_gcc.h ****     uint32_t result;
 876:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 877:Drivers/CMSIS/Include/cmsis_gcc.h ****    __ASM volatile ("ldaex %0, %1" : "=r" (result) : "Q" (*ptr) : "memory" );
 878:Drivers/CMSIS/Include/cmsis_gcc.h ****    return(result);
 879:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 880:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 881:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 882:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 883:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Store-Release Exclusive (8 bit)
 884:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Executes a STLB exclusive instruction for 8 bit values.
 885:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]  value  Value to store
 886:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    ptr  Pointer to location
 887:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return          0  Function succeeded
 888:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return          1  Function failed
 889:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 890:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __STLEXB(uint8_t value, volatile uint8_t *ptr)
 891:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 892:Drivers/CMSIS/Include/cmsis_gcc.h ****    uint32_t result;
 893:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 894:Drivers/CMSIS/Include/cmsis_gcc.h ****    __ASM volatile ("stlexb %0, %2, %1" : "=&r" (result), "=Q" (*ptr) : "r" ((uint32_t)value) : "mem
 895:Drivers/CMSIS/Include/cmsis_gcc.h ****    return(result);
 896:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 897:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 898:Drivers/CMSIS/Include/cmsis_gcc.h **** 
ARM GAS  C:\Users\CuongLe\AppData\Local\Temp\ccsxSNGX.s 			page 29


 899:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 900:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Store-Release Exclusive (16 bit)
 901:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Executes a STLH exclusive instruction for 16 bit values.
 902:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]  value  Value to store
 903:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    ptr  Pointer to location
 904:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return          0  Function succeeded
 905:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return          1  Function failed
 906:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 907:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __STLEXH(uint16_t value, volatile uint16_t *ptr)
 908:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 909:Drivers/CMSIS/Include/cmsis_gcc.h ****    uint32_t result;
 910:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 911:Drivers/CMSIS/Include/cmsis_gcc.h ****    __ASM volatile ("stlexh %0, %2, %1" : "=&r" (result), "=Q" (*ptr) : "r" ((uint32_t)value) : "mem
 912:Drivers/CMSIS/Include/cmsis_gcc.h ****    return(result);
 913:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 914:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 915:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 916:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 917:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Store-Release Exclusive (32 bit)
 918:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Executes a STL exclusive instruction for 32 bit values.
 919:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]  value  Value to store
 920:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    ptr  Pointer to location
 921:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return          0  Function succeeded
 922:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return          1  Function failed
 923:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 924:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __STLEX(uint32_t value, volatile uint32_t *ptr)
 925:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 926:Drivers/CMSIS/Include/cmsis_gcc.h ****    uint32_t result;
 927:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 928:Drivers/CMSIS/Include/cmsis_gcc.h ****    __ASM volatile ("stlex %0, %2, %1" : "=&r" (result), "=Q" (*ptr) : "r" ((uint32_t)value) : "memo
 929:Drivers/CMSIS/Include/cmsis_gcc.h ****    return(result);
 930:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 931:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 932:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif /* ((defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1)) || \
 933:Drivers/CMSIS/Include/cmsis_gcc.h ****            (defined (__ARM_ARCH_8M_BASE__ ) && (__ARM_ARCH_8M_BASE__ == 1))    ) */
 934:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 935:Drivers/CMSIS/Include/cmsis_gcc.h **** /*@}*/ /* end of group CMSIS_Core_InstructionInterface */
 936:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 937:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 938:Drivers/CMSIS/Include/cmsis_gcc.h **** /* ###########################  Core Function Access  ########################### */
 939:Drivers/CMSIS/Include/cmsis_gcc.h **** /** \ingroup  CMSIS_Core_FunctionInterface
 940:Drivers/CMSIS/Include/cmsis_gcc.h ****     \defgroup CMSIS_Core_RegAccFunctions CMSIS Core Register Access Functions
 941:Drivers/CMSIS/Include/cmsis_gcc.h ****   @{
 942:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 943:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 944:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 945:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Enable IRQ Interrupts
 946:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Enables IRQ interrupts by clearing special-purpose register PRIMASK.
 947:Drivers/CMSIS/Include/cmsis_gcc.h ****            Can only be executed in Privileged modes.
 948:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 949:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __enable_irq(void)
 950:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 951:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("cpsie i" : : : "memory");
 952:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 953:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 954:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 955:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
ARM GAS  C:\Users\CuongLe\AppData\Local\Temp\ccsxSNGX.s 			page 30


 956:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Disable IRQ Interrupts
 957:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
 958:Drivers/CMSIS/Include/cmsis_gcc.h ****            Can only be executed in Privileged modes.
 959:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 960:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __disable_irq(void)
 175              		.loc 2 960 27 view .LVU40
 176              	.LBB9:
 961:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 962:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("cpsid i" : : : "memory");
 177              		.loc 2 962 3 view .LVU41
 178              		.syntax unified
 179              	@ 962 "Drivers/CMSIS/Include/cmsis_gcc.h" 1
 180 0000 72B6     		cpsid i
 181              	@ 0 "" 2
 182              		.thumb
 183              		.syntax unified
 184              	.L6:
 185              	.LBE9:
 186              	.LBE8:
 528:Core/Src/main.c ****   while (1)
 187              		.loc 1 528 3 view .LVU42
 529:Core/Src/main.c ****   {
 530:Core/Src/main.c ****   }
 188              		.loc 1 530 3 view .LVU43
 528:Core/Src/main.c ****   while (1)
 189              		.loc 1 528 9 view .LVU44
 190 0002 FEE7     		b	.L6
 191              		.cfi_endproc
 192              	.LFE298:
 194              		.section	.text.MX_TIM2_Init,"ax",%progbits
 195              		.align	1
 196              		.syntax unified
 197              		.thumb
 198              		.thumb_func
 200              	MX_TIM2_Init:
 201              	.LFB291:
 250:Core/Src/main.c **** 
 202              		.loc 1 250 1 view -0
 203              		.cfi_startproc
 204              		@ args = 0, pretend = 0, frame = 48
 205              		@ frame_needed = 0, uses_anonymous_args = 0
 206 0000 10B5     		push	{r4, lr}
 207              	.LCFI3:
 208              		.cfi_def_cfa_offset 8
 209              		.cfi_offset 4, -8
 210              		.cfi_offset 14, -4
 211 0002 8CB0     		sub	sp, sp, #48
 212              	.LCFI4:
 213              		.cfi_def_cfa_offset 56
 256:Core/Src/main.c ****   TIM_MasterConfigTypeDef sMasterConfig = {0};
 214              		.loc 1 256 3 view .LVU46
 256:Core/Src/main.c ****   TIM_MasterConfigTypeDef sMasterConfig = {0};
 215              		.loc 1 256 27 is_stmt 0 view .LVU47
 216 0004 03AC     		add	r4, sp, #12
 217 0006 2422     		movs	r2, #36
 218 0008 0021     		movs	r1, #0
 219 000a 2046     		mov	r0, r4
ARM GAS  C:\Users\CuongLe\AppData\Local\Temp\ccsxSNGX.s 			page 31


 220 000c FFF7FEFF 		bl	memset
 221              	.LVL2:
 257:Core/Src/main.c **** 
 222              		.loc 1 257 3 is_stmt 1 view .LVU48
 257:Core/Src/main.c **** 
 223              		.loc 1 257 27 is_stmt 0 view .LVU49
 224 0010 0023     		movs	r3, #0
 225 0012 0193     		str	r3, [sp, #4]
 226 0014 0293     		str	r3, [sp, #8]
 262:Core/Src/main.c ****   htim2.Init.Prescaler = 0;
 227              		.loc 1 262 3 is_stmt 1 view .LVU50
 262:Core/Src/main.c ****   htim2.Init.Prescaler = 0;
 228              		.loc 1 262 18 is_stmt 0 view .LVU51
 229 0016 1348     		ldr	r0, .L13
 230 0018 4FF08042 		mov	r2, #1073741824
 231 001c 0260     		str	r2, [r0]
 263:Core/Src/main.c ****   htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 232              		.loc 1 263 3 is_stmt 1 view .LVU52
 263:Core/Src/main.c ****   htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 233              		.loc 1 263 24 is_stmt 0 view .LVU53
 234 001e 4360     		str	r3, [r0, #4]
 264:Core/Src/main.c ****   htim2.Init.Period = 4294967295;
 235              		.loc 1 264 3 is_stmt 1 view .LVU54
 264:Core/Src/main.c ****   htim2.Init.Period = 4294967295;
 236              		.loc 1 264 26 is_stmt 0 view .LVU55
 237 0020 8360     		str	r3, [r0, #8]
 265:Core/Src/main.c ****   htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 238              		.loc 1 265 3 is_stmt 1 view .LVU56
 265:Core/Src/main.c ****   htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 239              		.loc 1 265 21 is_stmt 0 view .LVU57
 240 0022 4FF0FF32 		mov	r2, #-1
 241 0026 C260     		str	r2, [r0, #12]
 266:Core/Src/main.c ****   htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 242              		.loc 1 266 3 is_stmt 1 view .LVU58
 266:Core/Src/main.c ****   htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 243              		.loc 1 266 28 is_stmt 0 view .LVU59
 244 0028 0361     		str	r3, [r0, #16]
 267:Core/Src/main.c ****   sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 245              		.loc 1 267 3 is_stmt 1 view .LVU60
 267:Core/Src/main.c ****   sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 246              		.loc 1 267 32 is_stmt 0 view .LVU61
 247 002a 8023     		movs	r3, #128
 248 002c 8361     		str	r3, [r0, #24]
 268:Core/Src/main.c ****   sConfig.IC1Polarity = TIM_ICPOLARITY_FALLING;
 249              		.loc 1 268 3 is_stmt 1 view .LVU62
 268:Core/Src/main.c ****   sConfig.IC1Polarity = TIM_ICPOLARITY_FALLING;
 250              		.loc 1 268 23 is_stmt 0 view .LVU63
 251 002e 0323     		movs	r3, #3
 252 0030 0393     		str	r3, [sp, #12]
 269:Core/Src/main.c ****   sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 253              		.loc 1 269 3 is_stmt 1 view .LVU64
 269:Core/Src/main.c ****   sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 254              		.loc 1 269 23 is_stmt 0 view .LVU65
 255 0032 0222     		movs	r2, #2
 256 0034 0492     		str	r2, [sp, #16]
 270:Core/Src/main.c ****   sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 257              		.loc 1 270 3 is_stmt 1 view .LVU66
ARM GAS  C:\Users\CuongLe\AppData\Local\Temp\ccsxSNGX.s 			page 32


 270:Core/Src/main.c ****   sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 258              		.loc 1 270 24 is_stmt 0 view .LVU67
 259 0036 0123     		movs	r3, #1
 260 0038 0593     		str	r3, [sp, #20]
 271:Core/Src/main.c ****   sConfig.IC1Filter = 0;
 261              		.loc 1 271 3 is_stmt 1 view .LVU68
 272:Core/Src/main.c ****   sConfig.IC2Polarity = TIM_ICPOLARITY_FALLING;
 262              		.loc 1 272 3 view .LVU69
 273:Core/Src/main.c ****   sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 263              		.loc 1 273 3 view .LVU70
 273:Core/Src/main.c ****   sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 264              		.loc 1 273 23 is_stmt 0 view .LVU71
 265 003a 0892     		str	r2, [sp, #32]
 274:Core/Src/main.c ****   sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 266              		.loc 1 274 3 is_stmt 1 view .LVU72
 274:Core/Src/main.c ****   sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 267              		.loc 1 274 24 is_stmt 0 view .LVU73
 268 003c 0993     		str	r3, [sp, #36]
 275:Core/Src/main.c ****   sConfig.IC2Filter = 0;
 269              		.loc 1 275 3 is_stmt 1 view .LVU74
 276:Core/Src/main.c ****   if (HAL_TIM_Encoder_Init(&htim2, &sConfig) != HAL_OK)
 270              		.loc 1 276 3 view .LVU75
 277:Core/Src/main.c ****   {
 271              		.loc 1 277 3 view .LVU76
 277:Core/Src/main.c ****   {
 272              		.loc 1 277 7 is_stmt 0 view .LVU77
 273 003e 2146     		mov	r1, r4
 274 0040 FFF7FEFF 		bl	HAL_TIM_Encoder_Init
 275              	.LVL3:
 277:Core/Src/main.c ****   {
 276              		.loc 1 277 6 discriminator 1 view .LVU78
 277 0044 48B9     		cbnz	r0, .L11
 281:Core/Src/main.c ****   sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 278              		.loc 1 281 3 is_stmt 1 view .LVU79
 281:Core/Src/main.c ****   sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 279              		.loc 1 281 37 is_stmt 0 view .LVU80
 280 0046 0023     		movs	r3, #0
 281 0048 0193     		str	r3, [sp, #4]
 282:Core/Src/main.c ****   if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 282              		.loc 1 282 3 is_stmt 1 view .LVU81
 282:Core/Src/main.c ****   if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 283              		.loc 1 282 33 is_stmt 0 view .LVU82
 284 004a 0293     		str	r3, [sp, #8]
 283:Core/Src/main.c ****   {
 285              		.loc 1 283 3 is_stmt 1 view .LVU83
 283:Core/Src/main.c ****   {
 286              		.loc 1 283 7 is_stmt 0 view .LVU84
 287 004c 01A9     		add	r1, sp, #4
 288 004e 0548     		ldr	r0, .L13
 289 0050 FFF7FEFF 		bl	HAL_TIMEx_MasterConfigSynchronization
 290              	.LVL4:
 283:Core/Src/main.c ****   {
 291              		.loc 1 283 6 discriminator 1 view .LVU85
 292 0054 18B9     		cbnz	r0, .L12
 291:Core/Src/main.c **** 
 293              		.loc 1 291 1 view .LVU86
 294 0056 0CB0     		add	sp, sp, #48
ARM GAS  C:\Users\CuongLe\AppData\Local\Temp\ccsxSNGX.s 			page 33


 295              	.LCFI5:
 296              		.cfi_remember_state
 297              		.cfi_def_cfa_offset 8
 298              		@ sp needed
 299 0058 10BD     		pop	{r4, pc}
 300              	.L11:
 301              	.LCFI6:
 302              		.cfi_restore_state
 279:Core/Src/main.c ****   }
 303              		.loc 1 279 5 is_stmt 1 view .LVU87
 304 005a FFF7FEFF 		bl	Error_Handler
 305              	.LVL5:
 306              	.L12:
 285:Core/Src/main.c ****   }
 307              		.loc 1 285 5 view .LVU88
 308 005e FFF7FEFF 		bl	Error_Handler
 309              	.LVL6:
 310              	.L14:
 311 0062 00BF     		.align	2
 312              	.L13:
 313 0064 00000000 		.word	htim2
 314              		.cfi_endproc
 315              	.LFE291:
 317              		.section	.text.MX_USART2_UART_Init,"ax",%progbits
 318              		.align	1
 319              		.syntax unified
 320              		.thumb
 321              		.thumb_func
 323              	MX_USART2_UART_Init:
 324              	.LFB295:
 424:Core/Src/main.c **** 
 325              		.loc 1 424 1 view -0
 326              		.cfi_startproc
 327              		@ args = 0, pretend = 0, frame = 0
 328              		@ frame_needed = 0, uses_anonymous_args = 0
 329 0000 08B5     		push	{r3, lr}
 330              	.LCFI7:
 331              		.cfi_def_cfa_offset 8
 332              		.cfi_offset 3, -8
 333              		.cfi_offset 14, -4
 433:Core/Src/main.c ****   huart2.Init.BaudRate = 115200;
 334              		.loc 1 433 3 view .LVU90
 433:Core/Src/main.c ****   huart2.Init.BaudRate = 115200;
 335              		.loc 1 433 19 is_stmt 0 view .LVU91
 336 0002 0A48     		ldr	r0, .L19
 337 0004 0A4B     		ldr	r3, .L19+4
 338 0006 0360     		str	r3, [r0]
 434:Core/Src/main.c ****   huart2.Init.WordLength = UART_WORDLENGTH_8B;
 339              		.loc 1 434 3 is_stmt 1 view .LVU92
 434:Core/Src/main.c ****   huart2.Init.WordLength = UART_WORDLENGTH_8B;
 340              		.loc 1 434 24 is_stmt 0 view .LVU93
 341 0008 4FF4E133 		mov	r3, #115200
 342 000c 4360     		str	r3, [r0, #4]
 435:Core/Src/main.c ****   huart2.Init.StopBits = UART_STOPBITS_1;
 343              		.loc 1 435 3 is_stmt 1 view .LVU94
 435:Core/Src/main.c ****   huart2.Init.StopBits = UART_STOPBITS_1;
 344              		.loc 1 435 26 is_stmt 0 view .LVU95
ARM GAS  C:\Users\CuongLe\AppData\Local\Temp\ccsxSNGX.s 			page 34


 345 000e 0023     		movs	r3, #0
 346 0010 8360     		str	r3, [r0, #8]
 436:Core/Src/main.c ****   huart2.Init.Parity = UART_PARITY_NONE;
 347              		.loc 1 436 3 is_stmt 1 view .LVU96
 436:Core/Src/main.c ****   huart2.Init.Parity = UART_PARITY_NONE;
 348              		.loc 1 436 24 is_stmt 0 view .LVU97
 349 0012 C360     		str	r3, [r0, #12]
 437:Core/Src/main.c ****   huart2.Init.Mode = UART_MODE_TX_RX;
 350              		.loc 1 437 3 is_stmt 1 view .LVU98
 437:Core/Src/main.c ****   huart2.Init.Mode = UART_MODE_TX_RX;
 351              		.loc 1 437 22 is_stmt 0 view .LVU99
 352 0014 0361     		str	r3, [r0, #16]
 438:Core/Src/main.c ****   huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 353              		.loc 1 438 3 is_stmt 1 view .LVU100
 438:Core/Src/main.c ****   huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 354              		.loc 1 438 20 is_stmt 0 view .LVU101
 355 0016 0C22     		movs	r2, #12
 356 0018 4261     		str	r2, [r0, #20]
 439:Core/Src/main.c ****   huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 357              		.loc 1 439 3 is_stmt 1 view .LVU102
 439:Core/Src/main.c ****   huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 358              		.loc 1 439 25 is_stmt 0 view .LVU103
 359 001a 8361     		str	r3, [r0, #24]
 440:Core/Src/main.c ****   if (HAL_UART_Init(&huart2) != HAL_OK)
 360              		.loc 1 440 3 is_stmt 1 view .LVU104
 440:Core/Src/main.c ****   if (HAL_UART_Init(&huart2) != HAL_OK)
 361              		.loc 1 440 28 is_stmt 0 view .LVU105
 362 001c C361     		str	r3, [r0, #28]
 441:Core/Src/main.c ****   {
 363              		.loc 1 441 3 is_stmt 1 view .LVU106
 441:Core/Src/main.c ****   {
 364              		.loc 1 441 7 is_stmt 0 view .LVU107
 365 001e FFF7FEFF 		bl	HAL_UART_Init
 366              	.LVL7:
 441:Core/Src/main.c ****   {
 367              		.loc 1 441 6 discriminator 1 view .LVU108
 368 0022 00B9     		cbnz	r0, .L18
 449:Core/Src/main.c **** 
 369              		.loc 1 449 1 view .LVU109
 370 0024 08BD     		pop	{r3, pc}
 371              	.L18:
 443:Core/Src/main.c ****   }
 372              		.loc 1 443 5 is_stmt 1 view .LVU110
 373 0026 FFF7FEFF 		bl	Error_Handler
 374              	.LVL8:
 375              	.L20:
 376 002a 00BF     		.align	2
 377              	.L19:
 378 002c 00000000 		.word	huart2
 379 0030 00440040 		.word	1073759232
 380              		.cfi_endproc
 381              	.LFE295:
 383              		.section	.text.MX_USART3_UART_Init,"ax",%progbits
 384              		.align	1
 385              		.syntax unified
 386              		.thumb
 387              		.thumb_func
ARM GAS  C:\Users\CuongLe\AppData\Local\Temp\ccsxSNGX.s 			page 35


 389              	MX_USART3_UART_Init:
 390              	.LFB296:
 457:Core/Src/main.c **** 
 391              		.loc 1 457 1 view -0
 392              		.cfi_startproc
 393              		@ args = 0, pretend = 0, frame = 0
 394              		@ frame_needed = 0, uses_anonymous_args = 0
 395 0000 08B5     		push	{r3, lr}
 396              	.LCFI8:
 397              		.cfi_def_cfa_offset 8
 398              		.cfi_offset 3, -8
 399              		.cfi_offset 14, -4
 466:Core/Src/main.c ****   huart3.Init.BaudRate = 576000;
 400              		.loc 1 466 3 view .LVU112
 466:Core/Src/main.c ****   huart3.Init.BaudRate = 576000;
 401              		.loc 1 466 19 is_stmt 0 view .LVU113
 402 0002 0948     		ldr	r0, .L25
 403 0004 094B     		ldr	r3, .L25+4
 404 0006 0360     		str	r3, [r0]
 467:Core/Src/main.c ****   huart3.Init.WordLength = UART_WORDLENGTH_8B;
 405              		.loc 1 467 3 is_stmt 1 view .LVU114
 467:Core/Src/main.c ****   huart3.Init.WordLength = UART_WORDLENGTH_8B;
 406              		.loc 1 467 24 is_stmt 0 view .LVU115
 407 0008 094B     		ldr	r3, .L25+8
 408 000a 4360     		str	r3, [r0, #4]
 468:Core/Src/main.c ****   huart3.Init.StopBits = UART_STOPBITS_1;
 409              		.loc 1 468 3 is_stmt 1 view .LVU116
 468:Core/Src/main.c ****   huart3.Init.StopBits = UART_STOPBITS_1;
 410              		.loc 1 468 26 is_stmt 0 view .LVU117
 411 000c 0023     		movs	r3, #0
 412 000e 8360     		str	r3, [r0, #8]
 469:Core/Src/main.c ****   huart3.Init.Parity = UART_PARITY_NONE;
 413              		.loc 1 469 3 is_stmt 1 view .LVU118
 469:Core/Src/main.c ****   huart3.Init.Parity = UART_PARITY_NONE;
 414              		.loc 1 469 24 is_stmt 0 view .LVU119
 415 0010 C360     		str	r3, [r0, #12]
 470:Core/Src/main.c ****   huart3.Init.Mode = UART_MODE_TX_RX;
 416              		.loc 1 470 3 is_stmt 1 view .LVU120
 470:Core/Src/main.c ****   huart3.Init.Mode = UART_MODE_TX_RX;
 417              		.loc 1 470 22 is_stmt 0 view .LVU121
 418 0012 0361     		str	r3, [r0, #16]
 471:Core/Src/main.c ****   huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 419              		.loc 1 471 3 is_stmt 1 view .LVU122
 471:Core/Src/main.c ****   huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 420              		.loc 1 471 20 is_stmt 0 view .LVU123
 421 0014 0C22     		movs	r2, #12
 422 0016 4261     		str	r2, [r0, #20]
 472:Core/Src/main.c ****   huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 423              		.loc 1 472 3 is_stmt 1 view .LVU124
 472:Core/Src/main.c ****   huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 424              		.loc 1 472 25 is_stmt 0 view .LVU125
 425 0018 8361     		str	r3, [r0, #24]
 473:Core/Src/main.c ****   if (HAL_UART_Init(&huart3) != HAL_OK)
 426              		.loc 1 473 3 is_stmt 1 view .LVU126
 473:Core/Src/main.c ****   if (HAL_UART_Init(&huart3) != HAL_OK)
 427              		.loc 1 473 28 is_stmt 0 view .LVU127
 428 001a C361     		str	r3, [r0, #28]
ARM GAS  C:\Users\CuongLe\AppData\Local\Temp\ccsxSNGX.s 			page 36


 474:Core/Src/main.c ****   {
 429              		.loc 1 474 3 is_stmt 1 view .LVU128
 474:Core/Src/main.c ****   {
 430              		.loc 1 474 7 is_stmt 0 view .LVU129
 431 001c FFF7FEFF 		bl	HAL_UART_Init
 432              	.LVL9:
 474:Core/Src/main.c ****   {
 433              		.loc 1 474 6 discriminator 1 view .LVU130
 434 0020 00B9     		cbnz	r0, .L24
 482:Core/Src/main.c **** 
 435              		.loc 1 482 1 view .LVU131
 436 0022 08BD     		pop	{r3, pc}
 437              	.L24:
 476:Core/Src/main.c ****   }
 438              		.loc 1 476 5 is_stmt 1 view .LVU132
 439 0024 FFF7FEFF 		bl	Error_Handler
 440              	.LVL10:
 441              	.L26:
 442              		.align	2
 443              	.L25:
 444 0028 00000000 		.word	huart3
 445 002c 00480040 		.word	1073760256
 446 0030 00CA0800 		.word	576000
 447              		.cfi_endproc
 448              	.LFE296:
 450              		.section	.text.MX_TIM6_Init,"ax",%progbits
 451              		.align	1
 452              		.syntax unified
 453              		.thumb
 454              		.thumb_func
 456              	MX_TIM6_Init:
 457              	.LFB293:
 348:Core/Src/main.c **** 
 458              		.loc 1 348 1 view -0
 459              		.cfi_startproc
 460              		@ args = 0, pretend = 0, frame = 8
 461              		@ frame_needed = 0, uses_anonymous_args = 0
 462 0000 00B5     		push	{lr}
 463              	.LCFI9:
 464              		.cfi_def_cfa_offset 4
 465              		.cfi_offset 14, -4
 466 0002 83B0     		sub	sp, sp, #12
 467              	.LCFI10:
 468              		.cfi_def_cfa_offset 16
 354:Core/Src/main.c **** 
 469              		.loc 1 354 3 view .LVU134
 354:Core/Src/main.c **** 
 470              		.loc 1 354 27 is_stmt 0 view .LVU135
 471 0004 0023     		movs	r3, #0
 472 0006 0093     		str	r3, [sp]
 473 0008 0193     		str	r3, [sp, #4]
 359:Core/Src/main.c ****   htim6.Init.Prescaler = 839;
 474              		.loc 1 359 3 is_stmt 1 view .LVU136
 359:Core/Src/main.c ****   htim6.Init.Prescaler = 839;
 475              		.loc 1 359 18 is_stmt 0 view .LVU137
 476 000a 0F48     		ldr	r0, .L33
 477 000c 0F4A     		ldr	r2, .L33+4
ARM GAS  C:\Users\CuongLe\AppData\Local\Temp\ccsxSNGX.s 			page 37


 478 000e 0260     		str	r2, [r0]
 360:Core/Src/main.c ****   htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 479              		.loc 1 360 3 is_stmt 1 view .LVU138
 360:Core/Src/main.c ****   htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 480              		.loc 1 360 24 is_stmt 0 view .LVU139
 481 0010 40F24732 		movw	r2, #839
 482 0014 4260     		str	r2, [r0, #4]
 361:Core/Src/main.c ****   htim6.Init.Period = 999;
 483              		.loc 1 361 3 is_stmt 1 view .LVU140
 361:Core/Src/main.c ****   htim6.Init.Period = 999;
 484              		.loc 1 361 26 is_stmt 0 view .LVU141
 485 0016 8360     		str	r3, [r0, #8]
 362:Core/Src/main.c ****   htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 486              		.loc 1 362 3 is_stmt 1 view .LVU142
 362:Core/Src/main.c ****   htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 487              		.loc 1 362 21 is_stmt 0 view .LVU143
 488 0018 40F2E733 		movw	r3, #999
 489 001c C360     		str	r3, [r0, #12]
 363:Core/Src/main.c ****   if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 490              		.loc 1 363 3 is_stmt 1 view .LVU144
 363:Core/Src/main.c ****   if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 491              		.loc 1 363 32 is_stmt 0 view .LVU145
 492 001e 8023     		movs	r3, #128
 493 0020 8361     		str	r3, [r0, #24]
 364:Core/Src/main.c ****   {
 494              		.loc 1 364 3 is_stmt 1 view .LVU146
 364:Core/Src/main.c ****   {
 495              		.loc 1 364 7 is_stmt 0 view .LVU147
 496 0022 FFF7FEFF 		bl	HAL_TIM_Base_Init
 497              	.LVL11:
 364:Core/Src/main.c ****   {
 498              		.loc 1 364 6 discriminator 1 view .LVU148
 499 0026 50B9     		cbnz	r0, .L31
 368:Core/Src/main.c ****   sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 500              		.loc 1 368 3 is_stmt 1 view .LVU149
 368:Core/Src/main.c ****   sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 501              		.loc 1 368 37 is_stmt 0 view .LVU150
 502 0028 0023     		movs	r3, #0
 503 002a 0093     		str	r3, [sp]
 369:Core/Src/main.c ****   if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 504              		.loc 1 369 3 is_stmt 1 view .LVU151
 369:Core/Src/main.c ****   if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 505              		.loc 1 369 33 is_stmt 0 view .LVU152
 506 002c 0193     		str	r3, [sp, #4]
 370:Core/Src/main.c ****   {
 507              		.loc 1 370 3 is_stmt 1 view .LVU153
 370:Core/Src/main.c ****   {
 508              		.loc 1 370 7 is_stmt 0 view .LVU154
 509 002e 6946     		mov	r1, sp
 510 0030 0548     		ldr	r0, .L33
 511 0032 FFF7FEFF 		bl	HAL_TIMEx_MasterConfigSynchronization
 512              	.LVL12:
 370:Core/Src/main.c ****   {
 513              		.loc 1 370 6 discriminator 1 view .LVU155
 514 0036 20B9     		cbnz	r0, .L32
 378:Core/Src/main.c **** 
 515              		.loc 1 378 1 view .LVU156
ARM GAS  C:\Users\CuongLe\AppData\Local\Temp\ccsxSNGX.s 			page 38


 516 0038 03B0     		add	sp, sp, #12
 517              	.LCFI11:
 518              		.cfi_remember_state
 519              		.cfi_def_cfa_offset 4
 520              		@ sp needed
 521 003a 5DF804FB 		ldr	pc, [sp], #4
 522              	.L31:
 523              	.LCFI12:
 524              		.cfi_restore_state
 366:Core/Src/main.c ****   }
 525              		.loc 1 366 5 is_stmt 1 view .LVU157
 526 003e FFF7FEFF 		bl	Error_Handler
 527              	.LVL13:
 528              	.L32:
 372:Core/Src/main.c ****   }
 529              		.loc 1 372 5 view .LVU158
 530 0042 FFF7FEFF 		bl	Error_Handler
 531              	.LVL14:
 532              	.L34:
 533 0046 00BF     		.align	2
 534              	.L33:
 535 0048 00000000 		.word	htim6
 536 004c 00100040 		.word	1073745920
 537              		.cfi_endproc
 538              	.LFE293:
 540              		.section	.text.MX_TIM7_Init,"ax",%progbits
 541              		.align	1
 542              		.syntax unified
 543              		.thumb
 544              		.thumb_func
 546              	MX_TIM7_Init:
 547              	.LFB294:
 386:Core/Src/main.c **** 
 548              		.loc 1 386 1 view -0
 549              		.cfi_startproc
 550              		@ args = 0, pretend = 0, frame = 8
 551              		@ frame_needed = 0, uses_anonymous_args = 0
 552 0000 00B5     		push	{lr}
 553              	.LCFI13:
 554              		.cfi_def_cfa_offset 4
 555              		.cfi_offset 14, -4
 556 0002 83B0     		sub	sp, sp, #12
 557              	.LCFI14:
 558              		.cfi_def_cfa_offset 16
 392:Core/Src/main.c **** 
 559              		.loc 1 392 3 view .LVU160
 392:Core/Src/main.c **** 
 560              		.loc 1 392 27 is_stmt 0 view .LVU161
 561 0004 0023     		movs	r3, #0
 562 0006 0093     		str	r3, [sp]
 563 0008 0193     		str	r3, [sp, #4]
 397:Core/Src/main.c ****   htim7.Init.Prescaler = 83;
 564              		.loc 1 397 3 is_stmt 1 view .LVU162
 397:Core/Src/main.c ****   htim7.Init.Prescaler = 83;
 565              		.loc 1 397 18 is_stmt 0 view .LVU163
 566 000a 0E48     		ldr	r0, .L41
 567 000c 0E4A     		ldr	r2, .L41+4
ARM GAS  C:\Users\CuongLe\AppData\Local\Temp\ccsxSNGX.s 			page 39


 568 000e 0260     		str	r2, [r0]
 398:Core/Src/main.c ****   htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
 569              		.loc 1 398 3 is_stmt 1 view .LVU164
 398:Core/Src/main.c ****   htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
 570              		.loc 1 398 24 is_stmt 0 view .LVU165
 571 0010 5322     		movs	r2, #83
 572 0012 4260     		str	r2, [r0, #4]
 399:Core/Src/main.c ****   htim7.Init.Period = 999;
 573              		.loc 1 399 3 is_stmt 1 view .LVU166
 399:Core/Src/main.c ****   htim7.Init.Period = 999;
 574              		.loc 1 399 26 is_stmt 0 view .LVU167
 575 0014 8360     		str	r3, [r0, #8]
 400:Core/Src/main.c ****   htim7.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 576              		.loc 1 400 3 is_stmt 1 view .LVU168
 400:Core/Src/main.c ****   htim7.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 577              		.loc 1 400 21 is_stmt 0 view .LVU169
 578 0016 40F2E733 		movw	r3, #999
 579 001a C360     		str	r3, [r0, #12]
 401:Core/Src/main.c ****   if (HAL_TIM_Base_Init(&htim7) != HAL_OK)
 580              		.loc 1 401 3 is_stmt 1 view .LVU170
 401:Core/Src/main.c ****   if (HAL_TIM_Base_Init(&htim7) != HAL_OK)
 581              		.loc 1 401 32 is_stmt 0 view .LVU171
 582 001c 8023     		movs	r3, #128
 583 001e 8361     		str	r3, [r0, #24]
 402:Core/Src/main.c ****   {
 584              		.loc 1 402 3 is_stmt 1 view .LVU172
 402:Core/Src/main.c ****   {
 585              		.loc 1 402 7 is_stmt 0 view .LVU173
 586 0020 FFF7FEFF 		bl	HAL_TIM_Base_Init
 587              	.LVL15:
 402:Core/Src/main.c ****   {
 588              		.loc 1 402 6 discriminator 1 view .LVU174
 589 0024 50B9     		cbnz	r0, .L39
 406:Core/Src/main.c ****   sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 590              		.loc 1 406 3 is_stmt 1 view .LVU175
 406:Core/Src/main.c ****   sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 591              		.loc 1 406 37 is_stmt 0 view .LVU176
 592 0026 0023     		movs	r3, #0
 593 0028 0093     		str	r3, [sp]
 407:Core/Src/main.c ****   if (HAL_TIMEx_MasterConfigSynchronization(&htim7, &sMasterConfig) != HAL_OK)
 594              		.loc 1 407 3 is_stmt 1 view .LVU177
 407:Core/Src/main.c ****   if (HAL_TIMEx_MasterConfigSynchronization(&htim7, &sMasterConfig) != HAL_OK)
 595              		.loc 1 407 33 is_stmt 0 view .LVU178
 596 002a 0193     		str	r3, [sp, #4]
 408:Core/Src/main.c ****   {
 597              		.loc 1 408 3 is_stmt 1 view .LVU179
 408:Core/Src/main.c ****   {
 598              		.loc 1 408 7 is_stmt 0 view .LVU180
 599 002c 6946     		mov	r1, sp
 600 002e 0548     		ldr	r0, .L41
 601 0030 FFF7FEFF 		bl	HAL_TIMEx_MasterConfigSynchronization
 602              	.LVL16:
 408:Core/Src/main.c ****   {
 603              		.loc 1 408 6 discriminator 1 view .LVU181
 604 0034 20B9     		cbnz	r0, .L40
 416:Core/Src/main.c **** 
 605              		.loc 1 416 1 view .LVU182
ARM GAS  C:\Users\CuongLe\AppData\Local\Temp\ccsxSNGX.s 			page 40


 606 0036 03B0     		add	sp, sp, #12
 607              	.LCFI15:
 608              		.cfi_remember_state
 609              		.cfi_def_cfa_offset 4
 610              		@ sp needed
 611 0038 5DF804FB 		ldr	pc, [sp], #4
 612              	.L39:
 613              	.LCFI16:
 614              		.cfi_restore_state
 404:Core/Src/main.c ****   }
 615              		.loc 1 404 5 is_stmt 1 view .LVU183
 616 003c FFF7FEFF 		bl	Error_Handler
 617              	.LVL17:
 618              	.L40:
 410:Core/Src/main.c ****   }
 619              		.loc 1 410 5 view .LVU184
 620 0040 FFF7FEFF 		bl	Error_Handler
 621              	.LVL18:
 622              	.L42:
 623              		.align	2
 624              	.L41:
 625 0044 00000000 		.word	htim7
 626 0048 00140040 		.word	1073746944
 627              		.cfi_endproc
 628              	.LFE294:
 630              		.section	.text.MX_TIM3_Init,"ax",%progbits
 631              		.align	1
 632              		.syntax unified
 633              		.thumb
 634              		.thumb_func
 636              	MX_TIM3_Init:
 637              	.LFB292:
 299:Core/Src/main.c **** 
 638              		.loc 1 299 1 view -0
 639              		.cfi_startproc
 640              		@ args = 0, pretend = 0, frame = 48
 641              		@ frame_needed = 0, uses_anonymous_args = 0
 642 0000 10B5     		push	{r4, lr}
 643              	.LCFI17:
 644              		.cfi_def_cfa_offset 8
 645              		.cfi_offset 4, -8
 646              		.cfi_offset 14, -4
 647 0002 8CB0     		sub	sp, sp, #48
 648              	.LCFI18:
 649              		.cfi_def_cfa_offset 56
 305:Core/Src/main.c ****   TIM_MasterConfigTypeDef sMasterConfig = {0};
 650              		.loc 1 305 3 view .LVU186
 305:Core/Src/main.c ****   TIM_MasterConfigTypeDef sMasterConfig = {0};
 651              		.loc 1 305 27 is_stmt 0 view .LVU187
 652 0004 03AC     		add	r4, sp, #12
 653 0006 2422     		movs	r2, #36
 654 0008 0021     		movs	r1, #0
 655 000a 2046     		mov	r0, r4
 656 000c FFF7FEFF 		bl	memset
 657              	.LVL19:
 306:Core/Src/main.c **** 
 658              		.loc 1 306 3 is_stmt 1 view .LVU188
ARM GAS  C:\Users\CuongLe\AppData\Local\Temp\ccsxSNGX.s 			page 41


 306:Core/Src/main.c **** 
 659              		.loc 1 306 27 is_stmt 0 view .LVU189
 660 0010 0023     		movs	r3, #0
 661 0012 0193     		str	r3, [sp, #4]
 662 0014 0293     		str	r3, [sp, #8]
 311:Core/Src/main.c ****   htim3.Init.Prescaler = 0;
 663              		.loc 1 311 3 is_stmt 1 view .LVU190
 311:Core/Src/main.c ****   htim3.Init.Prescaler = 0;
 664              		.loc 1 311 18 is_stmt 0 view .LVU191
 665 0016 1248     		ldr	r0, .L49
 666 0018 124A     		ldr	r2, .L49+4
 667 001a 0260     		str	r2, [r0]
 312:Core/Src/main.c ****   htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 668              		.loc 1 312 3 is_stmt 1 view .LVU192
 312:Core/Src/main.c ****   htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 669              		.loc 1 312 24 is_stmt 0 view .LVU193
 670 001c 4360     		str	r3, [r0, #4]
 313:Core/Src/main.c ****   htim3.Init.Period = 65535;
 671              		.loc 1 313 3 is_stmt 1 view .LVU194
 313:Core/Src/main.c ****   htim3.Init.Period = 65535;
 672              		.loc 1 313 26 is_stmt 0 view .LVU195
 673 001e 8360     		str	r3, [r0, #8]
 314:Core/Src/main.c ****   htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 674              		.loc 1 314 3 is_stmt 1 view .LVU196
 314:Core/Src/main.c ****   htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 675              		.loc 1 314 21 is_stmt 0 view .LVU197
 676 0020 4FF6FF72 		movw	r2, #65535
 677 0024 C260     		str	r2, [r0, #12]
 315:Core/Src/main.c ****   htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 678              		.loc 1 315 3 is_stmt 1 view .LVU198
 315:Core/Src/main.c ****   htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 679              		.loc 1 315 28 is_stmt 0 view .LVU199
 680 0026 0361     		str	r3, [r0, #16]
 316:Core/Src/main.c ****   sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 681              		.loc 1 316 3 is_stmt 1 view .LVU200
 316:Core/Src/main.c ****   sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 682              		.loc 1 316 32 is_stmt 0 view .LVU201
 683 0028 8361     		str	r3, [r0, #24]
 317:Core/Src/main.c ****   sConfig.IC1Polarity = TIM_ICPOLARITY_FALLING;
 684              		.loc 1 317 3 is_stmt 1 view .LVU202
 317:Core/Src/main.c ****   sConfig.IC1Polarity = TIM_ICPOLARITY_FALLING;
 685              		.loc 1 317 23 is_stmt 0 view .LVU203
 686 002a 0323     		movs	r3, #3
 687 002c 0393     		str	r3, [sp, #12]
 318:Core/Src/main.c ****   sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 688              		.loc 1 318 3 is_stmt 1 view .LVU204
 318:Core/Src/main.c ****   sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 689              		.loc 1 318 23 is_stmt 0 view .LVU205
 690 002e 0222     		movs	r2, #2
 691 0030 0492     		str	r2, [sp, #16]
 319:Core/Src/main.c ****   sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 692              		.loc 1 319 3 is_stmt 1 view .LVU206
 319:Core/Src/main.c ****   sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 693              		.loc 1 319 24 is_stmt 0 view .LVU207
 694 0032 0123     		movs	r3, #1
 695 0034 0593     		str	r3, [sp, #20]
 320:Core/Src/main.c ****   sConfig.IC1Filter = 0;
ARM GAS  C:\Users\CuongLe\AppData\Local\Temp\ccsxSNGX.s 			page 42


 696              		.loc 1 320 3 is_stmt 1 view .LVU208
 321:Core/Src/main.c ****   sConfig.IC2Polarity = TIM_ICPOLARITY_FALLING;
 697              		.loc 1 321 3 view .LVU209
 322:Core/Src/main.c ****   sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 698              		.loc 1 322 3 view .LVU210
 322:Core/Src/main.c ****   sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 699              		.loc 1 322 23 is_stmt 0 view .LVU211
 700 0036 0892     		str	r2, [sp, #32]
 323:Core/Src/main.c ****   sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 701              		.loc 1 323 3 is_stmt 1 view .LVU212
 323:Core/Src/main.c ****   sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 702              		.loc 1 323 24 is_stmt 0 view .LVU213
 703 0038 0993     		str	r3, [sp, #36]
 324:Core/Src/main.c ****   sConfig.IC2Filter = 0;
 704              		.loc 1 324 3 is_stmt 1 view .LVU214
 325:Core/Src/main.c ****   if (HAL_TIM_Encoder_Init(&htim3, &sConfig) != HAL_OK)
 705              		.loc 1 325 3 view .LVU215
 326:Core/Src/main.c ****   {
 706              		.loc 1 326 3 view .LVU216
 326:Core/Src/main.c ****   {
 707              		.loc 1 326 7 is_stmt 0 view .LVU217
 708 003a 2146     		mov	r1, r4
 709 003c FFF7FEFF 		bl	HAL_TIM_Encoder_Init
 710              	.LVL20:
 326:Core/Src/main.c ****   {
 711              		.loc 1 326 6 discriminator 1 view .LVU218
 712 0040 48B9     		cbnz	r0, .L47
 330:Core/Src/main.c ****   sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 713              		.loc 1 330 3 is_stmt 1 view .LVU219
 330:Core/Src/main.c ****   sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 714              		.loc 1 330 37 is_stmt 0 view .LVU220
 715 0042 0023     		movs	r3, #0
 716 0044 0193     		str	r3, [sp, #4]
 331:Core/Src/main.c ****   if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 717              		.loc 1 331 3 is_stmt 1 view .LVU221
 331:Core/Src/main.c ****   if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 718              		.loc 1 331 33 is_stmt 0 view .LVU222
 719 0046 0293     		str	r3, [sp, #8]
 332:Core/Src/main.c ****   {
 720              		.loc 1 332 3 is_stmt 1 view .LVU223
 332:Core/Src/main.c ****   {
 721              		.loc 1 332 7 is_stmt 0 view .LVU224
 722 0048 01A9     		add	r1, sp, #4
 723 004a 0548     		ldr	r0, .L49
 724 004c FFF7FEFF 		bl	HAL_TIMEx_MasterConfigSynchronization
 725              	.LVL21:
 332:Core/Src/main.c ****   {
 726              		.loc 1 332 6 discriminator 1 view .LVU225
 727 0050 18B9     		cbnz	r0, .L48
 340:Core/Src/main.c **** 
 728              		.loc 1 340 1 view .LVU226
 729 0052 0CB0     		add	sp, sp, #48
 730              	.LCFI19:
 731              		.cfi_remember_state
 732              		.cfi_def_cfa_offset 8
 733              		@ sp needed
 734 0054 10BD     		pop	{r4, pc}
ARM GAS  C:\Users\CuongLe\AppData\Local\Temp\ccsxSNGX.s 			page 43


 735              	.L47:
 736              	.LCFI20:
 737              		.cfi_restore_state
 328:Core/Src/main.c ****   }
 738              		.loc 1 328 5 is_stmt 1 view .LVU227
 739 0056 FFF7FEFF 		bl	Error_Handler
 740              	.LVL22:
 741              	.L48:
 334:Core/Src/main.c ****   }
 742              		.loc 1 334 5 view .LVU228
 743 005a FFF7FEFF 		bl	Error_Handler
 744              	.LVL23:
 745              	.L50:
 746 005e 00BF     		.align	2
 747              	.L49:
 748 0060 00000000 		.word	htim3
 749 0064 00040040 		.word	1073742848
 750              		.cfi_endproc
 751              	.LFE292:
 753              		.section	.text.MX_ADC1_Init,"ax",%progbits
 754              		.align	1
 755              		.syntax unified
 756              		.thumb
 757              		.thumb_func
 759              	MX_ADC1_Init:
 760              	.LFB290:
 198:Core/Src/main.c **** 
 761              		.loc 1 198 1 view -0
 762              		.cfi_startproc
 763              		@ args = 0, pretend = 0, frame = 16
 764              		@ frame_needed = 0, uses_anonymous_args = 0
 765 0000 00B5     		push	{lr}
 766              	.LCFI21:
 767              		.cfi_def_cfa_offset 4
 768              		.cfi_offset 14, -4
 769 0002 85B0     		sub	sp, sp, #20
 770              	.LCFI22:
 771              		.cfi_def_cfa_offset 24
 204:Core/Src/main.c **** 
 772              		.loc 1 204 3 view .LVU230
 204:Core/Src/main.c **** 
 773              		.loc 1 204 26 is_stmt 0 view .LVU231
 774 0004 0023     		movs	r3, #0
 775 0006 0093     		str	r3, [sp]
 776 0008 0193     		str	r3, [sp, #4]
 777 000a 0293     		str	r3, [sp, #8]
 778 000c 0393     		str	r3, [sp, #12]
 212:Core/Src/main.c ****   hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 779              		.loc 1 212 3 is_stmt 1 view .LVU232
 212:Core/Src/main.c ****   hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 780              		.loc 1 212 18 is_stmt 0 view .LVU233
 781 000e 1448     		ldr	r0, .L57
 782 0010 144A     		ldr	r2, .L57+4
 783 0012 0260     		str	r2, [r0]
 213:Core/Src/main.c ****   hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 784              		.loc 1 213 3 is_stmt 1 view .LVU234
 213:Core/Src/main.c ****   hadc1.Init.Resolution = ADC_RESOLUTION_12B;
ARM GAS  C:\Users\CuongLe\AppData\Local\Temp\ccsxSNGX.s 			page 44


 785              		.loc 1 213 29 is_stmt 0 view .LVU235
 786 0014 4FF48032 		mov	r2, #65536
 787 0018 4260     		str	r2, [r0, #4]
 214:Core/Src/main.c ****   hadc1.Init.ScanConvMode = DISABLE;
 788              		.loc 1 214 3 is_stmt 1 view .LVU236
 214:Core/Src/main.c ****   hadc1.Init.ScanConvMode = DISABLE;
 789              		.loc 1 214 25 is_stmt 0 view .LVU237
 790 001a 8360     		str	r3, [r0, #8]
 215:Core/Src/main.c ****   hadc1.Init.ContinuousConvMode = ENABLE;
 791              		.loc 1 215 3 is_stmt 1 view .LVU238
 215:Core/Src/main.c ****   hadc1.Init.ContinuousConvMode = ENABLE;
 792              		.loc 1 215 27 is_stmt 0 view .LVU239
 793 001c 0361     		str	r3, [r0, #16]
 216:Core/Src/main.c ****   hadc1.Init.DiscontinuousConvMode = DISABLE;
 794              		.loc 1 216 3 is_stmt 1 view .LVU240
 216:Core/Src/main.c ****   hadc1.Init.DiscontinuousConvMode = DISABLE;
 795              		.loc 1 216 33 is_stmt 0 view .LVU241
 796 001e 0122     		movs	r2, #1
 797 0020 0276     		strb	r2, [r0, #24]
 217:Core/Src/main.c ****   hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 798              		.loc 1 217 3 is_stmt 1 view .LVU242
 217:Core/Src/main.c ****   hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 799              		.loc 1 217 36 is_stmt 0 view .LVU243
 800 0022 80F82030 		strb	r3, [r0, #32]
 218:Core/Src/main.c ****   hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 801              		.loc 1 218 3 is_stmt 1 view .LVU244
 218:Core/Src/main.c ****   hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 802              		.loc 1 218 35 is_stmt 0 view .LVU245
 803 0026 C362     		str	r3, [r0, #44]
 219:Core/Src/main.c ****   hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 804              		.loc 1 219 3 is_stmt 1 view .LVU246
 219:Core/Src/main.c ****   hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 805              		.loc 1 219 31 is_stmt 0 view .LVU247
 806 0028 0F49     		ldr	r1, .L57+8
 807 002a 8162     		str	r1, [r0, #40]
 220:Core/Src/main.c ****   hadc1.Init.NbrOfConversion = 1;
 808              		.loc 1 220 3 is_stmt 1 view .LVU248
 220:Core/Src/main.c ****   hadc1.Init.NbrOfConversion = 1;
 809              		.loc 1 220 24 is_stmt 0 view .LVU249
 810 002c C360     		str	r3, [r0, #12]
 221:Core/Src/main.c ****   hadc1.Init.DMAContinuousRequests = DISABLE;
 811              		.loc 1 221 3 is_stmt 1 view .LVU250
 221:Core/Src/main.c ****   hadc1.Init.DMAContinuousRequests = DISABLE;
 812              		.loc 1 221 30 is_stmt 0 view .LVU251
 813 002e C261     		str	r2, [r0, #28]
 222:Core/Src/main.c ****   hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 814              		.loc 1 222 3 is_stmt 1 view .LVU252
 222:Core/Src/main.c ****   hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 815              		.loc 1 222 36 is_stmt 0 view .LVU253
 816 0030 80F83030 		strb	r3, [r0, #48]
 223:Core/Src/main.c ****   if (HAL_ADC_Init(&hadc1) != HAL_OK)
 817              		.loc 1 223 3 is_stmt 1 view .LVU254
 223:Core/Src/main.c ****   if (HAL_ADC_Init(&hadc1) != HAL_OK)
 818              		.loc 1 223 27 is_stmt 0 view .LVU255
 819 0034 4261     		str	r2, [r0, #20]
 224:Core/Src/main.c ****   {
 820              		.loc 1 224 3 is_stmt 1 view .LVU256
ARM GAS  C:\Users\CuongLe\AppData\Local\Temp\ccsxSNGX.s 			page 45


 224:Core/Src/main.c ****   {
 821              		.loc 1 224 7 is_stmt 0 view .LVU257
 822 0036 FFF7FEFF 		bl	HAL_ADC_Init
 823              	.LVL24:
 224:Core/Src/main.c ****   {
 824              		.loc 1 224 6 discriminator 1 view .LVU258
 825 003a 68B9     		cbnz	r0, .L55
 231:Core/Src/main.c ****   sConfig.Rank = 1;
 826              		.loc 1 231 3 is_stmt 1 view .LVU259
 231:Core/Src/main.c ****   sConfig.Rank = 1;
 827              		.loc 1 231 19 is_stmt 0 view .LVU260
 828 003c 0523     		movs	r3, #5
 829 003e 0093     		str	r3, [sp]
 232:Core/Src/main.c ****   sConfig.SamplingTime = ADC_SAMPLETIME_480CYCLES;
 830              		.loc 1 232 3 is_stmt 1 view .LVU261
 232:Core/Src/main.c ****   sConfig.SamplingTime = ADC_SAMPLETIME_480CYCLES;
 831              		.loc 1 232 16 is_stmt 0 view .LVU262
 832 0040 0123     		movs	r3, #1
 833 0042 0193     		str	r3, [sp, #4]
 233:Core/Src/main.c ****   if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 834              		.loc 1 233 3 is_stmt 1 view .LVU263
 233:Core/Src/main.c ****   if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 835              		.loc 1 233 24 is_stmt 0 view .LVU264
 836 0044 0723     		movs	r3, #7
 837 0046 0293     		str	r3, [sp, #8]
 234:Core/Src/main.c ****   {
 838              		.loc 1 234 3 is_stmt 1 view .LVU265
 234:Core/Src/main.c ****   {
 839              		.loc 1 234 7 is_stmt 0 view .LVU266
 840 0048 6946     		mov	r1, sp
 841 004a 0548     		ldr	r0, .L57
 842 004c FFF7FEFF 		bl	HAL_ADC_ConfigChannel
 843              	.LVL25:
 234:Core/Src/main.c ****   {
 844              		.loc 1 234 6 discriminator 1 view .LVU267
 845 0050 20B9     		cbnz	r0, .L56
 242:Core/Src/main.c **** 
 846              		.loc 1 242 1 view .LVU268
 847 0052 05B0     		add	sp, sp, #20
 848              	.LCFI23:
 849              		.cfi_remember_state
 850              		.cfi_def_cfa_offset 4
 851              		@ sp needed
 852 0054 5DF804FB 		ldr	pc, [sp], #4
 853              	.L55:
 854              	.LCFI24:
 855              		.cfi_restore_state
 226:Core/Src/main.c ****   }
 856              		.loc 1 226 5 is_stmt 1 view .LVU269
 857 0058 FFF7FEFF 		bl	Error_Handler
 858              	.LVL26:
 859              	.L56:
 236:Core/Src/main.c ****   }
 860              		.loc 1 236 5 view .LVU270
 861 005c FFF7FEFF 		bl	Error_Handler
 862              	.LVL27:
 863              	.L58:
ARM GAS  C:\Users\CuongLe\AppData\Local\Temp\ccsxSNGX.s 			page 46


 864              		.align	2
 865              	.L57:
 866 0060 00000000 		.word	hadc1
 867 0064 00200140 		.word	1073815552
 868 0068 0100000F 		.word	251658241
 869              		.cfi_endproc
 870              	.LFE290:
 872              		.section	.text.SystemClock_Config,"ax",%progbits
 873              		.align	1
 874              		.global	SystemClock_Config
 875              		.syntax unified
 876              		.thumb
 877              		.thumb_func
 879              	SystemClock_Config:
 880              	.LFB289:
 151:Core/Src/main.c ****   RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 881              		.loc 1 151 1 view -0
 882              		.cfi_startproc
 883              		@ args = 0, pretend = 0, frame = 80
 884              		@ frame_needed = 0, uses_anonymous_args = 0
 885 0000 10B5     		push	{r4, lr}
 886              	.LCFI25:
 887              		.cfi_def_cfa_offset 8
 888              		.cfi_offset 4, -8
 889              		.cfi_offset 14, -4
 890 0002 94B0     		sub	sp, sp, #80
 891              	.LCFI26:
 892              		.cfi_def_cfa_offset 88
 152:Core/Src/main.c ****   RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 893              		.loc 1 152 3 view .LVU272
 152:Core/Src/main.c ****   RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 894              		.loc 1 152 22 is_stmt 0 view .LVU273
 895 0004 08AC     		add	r4, sp, #32
 896 0006 3022     		movs	r2, #48
 897 0008 0021     		movs	r1, #0
 898 000a 2046     		mov	r0, r4
 899 000c FFF7FEFF 		bl	memset
 900              	.LVL28:
 153:Core/Src/main.c **** 
 901              		.loc 1 153 3 is_stmt 1 view .LVU274
 153:Core/Src/main.c **** 
 902              		.loc 1 153 22 is_stmt 0 view .LVU275
 903 0010 0023     		movs	r3, #0
 904 0012 0393     		str	r3, [sp, #12]
 905 0014 0493     		str	r3, [sp, #16]
 906 0016 0593     		str	r3, [sp, #20]
 907 0018 0693     		str	r3, [sp, #24]
 908 001a 0793     		str	r3, [sp, #28]
 157:Core/Src/main.c ****   __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 909              		.loc 1 157 3 is_stmt 1 view .LVU276
 910              	.LBB10:
 157:Core/Src/main.c ****   __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 911              		.loc 1 157 3 view .LVU277
 912 001c 0193     		str	r3, [sp, #4]
 157:Core/Src/main.c ****   __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 913              		.loc 1 157 3 view .LVU278
 914 001e 1F4A     		ldr	r2, .L65
ARM GAS  C:\Users\CuongLe\AppData\Local\Temp\ccsxSNGX.s 			page 47


 915 0020 116C     		ldr	r1, [r2, #64]
 916 0022 41F08051 		orr	r1, r1, #268435456
 917 0026 1164     		str	r1, [r2, #64]
 157:Core/Src/main.c ****   __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 918              		.loc 1 157 3 view .LVU279
 919 0028 126C     		ldr	r2, [r2, #64]
 920 002a 02F08052 		and	r2, r2, #268435456
 921 002e 0192     		str	r2, [sp, #4]
 157:Core/Src/main.c ****   __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 922              		.loc 1 157 3 view .LVU280
 923 0030 019A     		ldr	r2, [sp, #4]
 924              	.LBE10:
 157:Core/Src/main.c ****   __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 925              		.loc 1 157 3 view .LVU281
 158:Core/Src/main.c **** 
 926              		.loc 1 158 3 view .LVU282
 927              	.LBB11:
 158:Core/Src/main.c **** 
 928              		.loc 1 158 3 view .LVU283
 929 0032 0293     		str	r3, [sp, #8]
 158:Core/Src/main.c **** 
 930              		.loc 1 158 3 view .LVU284
 931 0034 1A4A     		ldr	r2, .L65+4
 932 0036 1168     		ldr	r1, [r2]
 933 0038 41F48041 		orr	r1, r1, #16384
 934 003c 1160     		str	r1, [r2]
 158:Core/Src/main.c **** 
 935              		.loc 1 158 3 view .LVU285
 936 003e 1268     		ldr	r2, [r2]
 937 0040 02F48042 		and	r2, r2, #16384
 938 0044 0292     		str	r2, [sp, #8]
 158:Core/Src/main.c **** 
 939              		.loc 1 158 3 view .LVU286
 940 0046 029A     		ldr	r2, [sp, #8]
 941              	.LBE11:
 158:Core/Src/main.c **** 
 942              		.loc 1 158 3 view .LVU287
 163:Core/Src/main.c ****   RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 943              		.loc 1 163 3 view .LVU288
 163:Core/Src/main.c ****   RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 944              		.loc 1 163 36 is_stmt 0 view .LVU289
 945 0048 0222     		movs	r2, #2
 946 004a 0892     		str	r2, [sp, #32]
 164:Core/Src/main.c ****   RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 947              		.loc 1 164 3 is_stmt 1 view .LVU290
 164:Core/Src/main.c ****   RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 948              		.loc 1 164 30 is_stmt 0 view .LVU291
 949 004c 0121     		movs	r1, #1
 950 004e 0B91     		str	r1, [sp, #44]
 165:Core/Src/main.c ****   RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 951              		.loc 1 165 3 is_stmt 1 view .LVU292
 165:Core/Src/main.c ****   RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 952              		.loc 1 165 41 is_stmt 0 view .LVU293
 953 0050 1021     		movs	r1, #16
 954 0052 0C91     		str	r1, [sp, #48]
 166:Core/Src/main.c ****   RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 955              		.loc 1 166 3 is_stmt 1 view .LVU294
ARM GAS  C:\Users\CuongLe\AppData\Local\Temp\ccsxSNGX.s 			page 48


 166:Core/Src/main.c ****   RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 956              		.loc 1 166 34 is_stmt 0 view .LVU295
 957 0054 0E92     		str	r2, [sp, #56]
 167:Core/Src/main.c ****   RCC_OscInitStruct.PLL.PLLM = 8;
 958              		.loc 1 167 3 is_stmt 1 view .LVU296
 167:Core/Src/main.c ****   RCC_OscInitStruct.PLL.PLLM = 8;
 959              		.loc 1 167 35 is_stmt 0 view .LVU297
 960 0056 0F93     		str	r3, [sp, #60]
 168:Core/Src/main.c ****   RCC_OscInitStruct.PLL.PLLN = 168;
 961              		.loc 1 168 3 is_stmt 1 view .LVU298
 168:Core/Src/main.c ****   RCC_OscInitStruct.PLL.PLLN = 168;
 962              		.loc 1 168 30 is_stmt 0 view .LVU299
 963 0058 0823     		movs	r3, #8
 964 005a 1093     		str	r3, [sp, #64]
 169:Core/Src/main.c ****   RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 965              		.loc 1 169 3 is_stmt 1 view .LVU300
 169:Core/Src/main.c ****   RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 966              		.loc 1 169 30 is_stmt 0 view .LVU301
 967 005c A823     		movs	r3, #168
 968 005e 1193     		str	r3, [sp, #68]
 170:Core/Src/main.c ****   RCC_OscInitStruct.PLL.PLLQ = 4;
 969              		.loc 1 170 3 is_stmt 1 view .LVU302
 170:Core/Src/main.c ****   RCC_OscInitStruct.PLL.PLLQ = 4;
 970              		.loc 1 170 30 is_stmt 0 view .LVU303
 971 0060 1292     		str	r2, [sp, #72]
 171:Core/Src/main.c ****   if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 972              		.loc 1 171 3 is_stmt 1 view .LVU304
 171:Core/Src/main.c ****   if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 973              		.loc 1 171 30 is_stmt 0 view .LVU305
 974 0062 0423     		movs	r3, #4
 975 0064 1393     		str	r3, [sp, #76]
 172:Core/Src/main.c ****   {
 976              		.loc 1 172 3 is_stmt 1 view .LVU306
 172:Core/Src/main.c ****   {
 977              		.loc 1 172 7 is_stmt 0 view .LVU307
 978 0066 2046     		mov	r0, r4
 979 0068 FFF7FEFF 		bl	HAL_RCC_OscConfig
 980              	.LVL29:
 172:Core/Src/main.c ****   {
 981              		.loc 1 172 6 discriminator 1 view .LVU308
 982 006c 90B9     		cbnz	r0, .L63
 179:Core/Src/main.c ****                               |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
 983              		.loc 1 179 3 is_stmt 1 view .LVU309
 179:Core/Src/main.c ****                               |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
 984              		.loc 1 179 31 is_stmt 0 view .LVU310
 985 006e 0F23     		movs	r3, #15
 986 0070 0393     		str	r3, [sp, #12]
 181:Core/Src/main.c ****   RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 987              		.loc 1 181 3 is_stmt 1 view .LVU311
 181:Core/Src/main.c ****   RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 988              		.loc 1 181 34 is_stmt 0 view .LVU312
 989 0072 0223     		movs	r3, #2
 990 0074 0493     		str	r3, [sp, #16]
 182:Core/Src/main.c ****   RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 991              		.loc 1 182 3 is_stmt 1 view .LVU313
 182:Core/Src/main.c ****   RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 992              		.loc 1 182 35 is_stmt 0 view .LVU314
ARM GAS  C:\Users\CuongLe\AppData\Local\Temp\ccsxSNGX.s 			page 49


 993 0076 0023     		movs	r3, #0
 994 0078 0593     		str	r3, [sp, #20]
 183:Core/Src/main.c ****   RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 995              		.loc 1 183 3 is_stmt 1 view .LVU315
 183:Core/Src/main.c ****   RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 996              		.loc 1 183 36 is_stmt 0 view .LVU316
 997 007a 4FF4A053 		mov	r3, #5120
 998 007e 0693     		str	r3, [sp, #24]
 184:Core/Src/main.c **** 
 999              		.loc 1 184 3 is_stmt 1 view .LVU317
 184:Core/Src/main.c **** 
 1000              		.loc 1 184 36 is_stmt 0 view .LVU318
 1001 0080 4FF48053 		mov	r3, #4096
 1002 0084 0793     		str	r3, [sp, #28]
 186:Core/Src/main.c ****   {
 1003              		.loc 1 186 3 is_stmt 1 view .LVU319
 186:Core/Src/main.c ****   {
 1004              		.loc 1 186 7 is_stmt 0 view .LVU320
 1005 0086 0521     		movs	r1, #5
 1006 0088 03A8     		add	r0, sp, #12
 1007 008a FFF7FEFF 		bl	HAL_RCC_ClockConfig
 1008              	.LVL30:
 186:Core/Src/main.c ****   {
 1009              		.loc 1 186 6 discriminator 1 view .LVU321
 1010 008e 18B9     		cbnz	r0, .L64
 190:Core/Src/main.c **** 
 1011              		.loc 1 190 1 view .LVU322
 1012 0090 14B0     		add	sp, sp, #80
 1013              	.LCFI27:
 1014              		.cfi_remember_state
 1015              		.cfi_def_cfa_offset 8
 1016              		@ sp needed
 1017 0092 10BD     		pop	{r4, pc}
 1018              	.L63:
 1019              	.LCFI28:
 1020              		.cfi_restore_state
 174:Core/Src/main.c ****   }
 1021              		.loc 1 174 5 is_stmt 1 view .LVU323
 1022 0094 FFF7FEFF 		bl	Error_Handler
 1023              	.LVL31:
 1024              	.L64:
 188:Core/Src/main.c ****   }
 1025              		.loc 1 188 5 view .LVU324
 1026 0098 FFF7FEFF 		bl	Error_Handler
 1027              	.LVL32:
 1028              	.L66:
 1029              		.align	2
 1030              	.L65:
 1031 009c 00380240 		.word	1073887232
 1032 00a0 00700040 		.word	1073770496
 1033              		.cfi_endproc
 1034              	.LFE289:
 1036              		.section	.text.main,"ax",%progbits
 1037              		.align	1
 1038              		.global	main
 1039              		.syntax unified
 1040              		.thumb
ARM GAS  C:\Users\CuongLe\AppData\Local\Temp\ccsxSNGX.s 			page 50


 1041              		.thumb_func
 1043              	main:
 1044              	.LFB288:
  89:Core/Src/main.c **** 
 1045              		.loc 1 89 1 view -0
 1046              		.cfi_startproc
 1047              		@ Volatile: function does not return.
 1048              		@ args = 0, pretend = 0, frame = 0
 1049              		@ frame_needed = 0, uses_anonymous_args = 0
 1050 0000 08B5     		push	{r3, lr}
 1051              	.LCFI29:
 1052              		.cfi_def_cfa_offset 8
 1053              		.cfi_offset 3, -8
 1054              		.cfi_offset 14, -4
  98:Core/Src/main.c **** 
 1055              		.loc 1 98 3 view .LVU326
 1056 0002 FFF7FEFF 		bl	HAL_Init
 1057              	.LVL33:
 105:Core/Src/main.c **** 
 1058              		.loc 1 105 3 view .LVU327
 1059 0006 FFF7FEFF 		bl	SystemClock_Config
 1060              	.LVL34:
 112:Core/Src/main.c ****   MX_TIM2_Init();
 1061              		.loc 1 112 3 view .LVU328
 1062 000a FFF7FEFF 		bl	MX_GPIO_Init
 1063              	.LVL35:
 113:Core/Src/main.c ****   MX_USART2_UART_Init();
 1064              		.loc 1 113 3 view .LVU329
 1065 000e FFF7FEFF 		bl	MX_TIM2_Init
 1066              	.LVL36:
 114:Core/Src/main.c ****   MX_USART3_UART_Init();
 1067              		.loc 1 114 3 view .LVU330
 1068 0012 FFF7FEFF 		bl	MX_USART2_UART_Init
 1069              	.LVL37:
 115:Core/Src/main.c ****   MX_TIM6_Init();
 1070              		.loc 1 115 3 view .LVU331
 1071 0016 FFF7FEFF 		bl	MX_USART3_UART_Init
 1072              	.LVL38:
 116:Core/Src/main.c ****   MX_TIM7_Init();
 1073              		.loc 1 116 3 view .LVU332
 1074 001a FFF7FEFF 		bl	MX_TIM6_Init
 1075              	.LVL39:
 117:Core/Src/main.c ****   MX_TIM3_Init();
 1076              		.loc 1 117 3 view .LVU333
 1077 001e FFF7FEFF 		bl	MX_TIM7_Init
 1078              	.LVL40:
 118:Core/Src/main.c ****   MX_ADC1_Init();
 1079              		.loc 1 118 3 view .LVU334
 1080 0022 FFF7FEFF 		bl	MX_TIM3_Init
 1081              	.LVL41:
 119:Core/Src/main.c ****   /* USER CODE BEGIN 2 */
 1082              		.loc 1 119 3 view .LVU335
 1083 0026 FFF7FEFF 		bl	MX_ADC1_Init
 1084              	.LVL42:
 122:Core/Src/main.c ****   computer.super.start(computer_AO, 1, 15, 1500);
 1085              		.loc 1 122 3 view .LVU336
 122:Core/Src/main.c ****   computer.super.start(computer_AO, 1, 15, 1500);
ARM GAS  C:\Users\CuongLe\AppData\Local\Temp\ccsxSNGX.s 			page 51


 1086              		.loc 1 122 11 is_stmt 0 view .LVU337
 1087 002a 154B     		ldr	r3, .L70
 1088 002c 1B68     		ldr	r3, [r3]
 122:Core/Src/main.c ****   computer.super.start(computer_AO, 1, 15, 1500);
 1089              		.loc 1 122 3 view .LVU338
 1090 002e 154C     		ldr	r4, .L70+4
 1091 0030 2046     		mov	r0, r4
 1092 0032 9847     		blx	r3
 1093              	.LVL43:
 123:Core/Src/main.c **** 
 1094              		.loc 1 123 3 is_stmt 1 view .LVU339
 123:Core/Src/main.c **** 
 1095              		.loc 1 123 17 is_stmt 0 view .LVU340
 1096 0034 D4F8BC50 		ldr	r5, [r4, #188]
 123:Core/Src/main.c **** 
 1097              		.loc 1 123 3 view .LVU341
 1098 0038 40F2DC53 		movw	r3, #1500
 1099 003c 0F22     		movs	r2, #15
 1100 003e 0121     		movs	r1, #1
 1101 0040 2046     		mov	r0, r4
 1102 0042 A847     		blx	r5
 1103              	.LVL44:
 125:Core/Src/main.c ****   estimator.super.start(estimator_AO, 2, 20, 3000);
 1104              		.loc 1 125 3 is_stmt 1 view .LVU342
 125:Core/Src/main.c ****   estimator.super.start(estimator_AO, 2, 20, 3000);
 1105              		.loc 1 125 12 is_stmt 0 view .LVU343
 1106 0044 104B     		ldr	r3, .L70+8
 1107 0046 1B68     		ldr	r3, [r3]
 125:Core/Src/main.c ****   estimator.super.start(estimator_AO, 2, 20, 3000);
 1108              		.loc 1 125 3 view .LVU344
 1109 0048 104C     		ldr	r4, .L70+12
 1110 004a 2046     		mov	r0, r4
 1111 004c 9847     		blx	r3
 1112              	.LVL45:
 126:Core/Src/main.c **** 
 1113              		.loc 1 126 3 is_stmt 1 view .LVU345
 126:Core/Src/main.c **** 
 1114              		.loc 1 126 18 is_stmt 0 view .LVU346
 1115 004e D4F8BC50 		ldr	r5, [r4, #188]
 126:Core/Src/main.c **** 
 1116              		.loc 1 126 3 view .LVU347
 1117 0052 40F6B833 		movw	r3, #3000
 1118 0056 1422     		movs	r2, #20
 1119 0058 0221     		movs	r1, #2
 1120 005a 2046     		mov	r0, r4
 1121 005c A847     		blx	r5
 1122              	.LVL46:
 128:Core/Src/main.c ****   motor.super.start(motor_AO, 3, 15, 1500);
 1123              		.loc 1 128 3 is_stmt 1 view .LVU348
 128:Core/Src/main.c ****   motor.super.start(motor_AO, 3, 15, 1500);
 1124              		.loc 1 128 8 is_stmt 0 view .LVU349
 1125 005e 0C4B     		ldr	r3, .L70+16
 1126 0060 1B68     		ldr	r3, [r3]
 128:Core/Src/main.c ****   motor.super.start(motor_AO, 3, 15, 1500);
 1127              		.loc 1 128 3 view .LVU350
 1128 0062 0C4C     		ldr	r4, .L70+20
 1129 0064 2046     		mov	r0, r4
ARM GAS  C:\Users\CuongLe\AppData\Local\Temp\ccsxSNGX.s 			page 52


 1130 0066 9847     		blx	r3
 1131              	.LVL47:
 129:Core/Src/main.c **** 
 1132              		.loc 1 129 3 is_stmt 1 view .LVU351
 129:Core/Src/main.c **** 
 1133              		.loc 1 129 14 is_stmt 0 view .LVU352
 1134 0068 D4F8BC50 		ldr	r5, [r4, #188]
 129:Core/Src/main.c **** 
 1135              		.loc 1 129 3 view .LVU353
 1136 006c 40F2DC53 		movw	r3, #1500
 1137 0070 0F22     		movs	r2, #15
 1138 0072 0321     		movs	r1, #3
 1139 0074 2046     		mov	r0, r4
 1140 0076 A847     		blx	r5
 1141              	.LVL48:
 131:Core/Src/main.c **** 
 1142              		.loc 1 131 3 is_stmt 1 view .LVU354
 1143 0078 FFF7FEFF 		bl	vTaskStartScheduler
 1144              	.LVL49:
 1145              	.L68:
 137:Core/Src/main.c ****   {
 1146              		.loc 1 137 3 view .LVU355
 142:Core/Src/main.c ****   /* USER CODE END 3 */
 1147              		.loc 1 142 3 view .LVU356
 137:Core/Src/main.c ****   {
 1148              		.loc 1 137 9 view .LVU357
 1149 007c FEE7     		b	.L68
 1150              	.L71:
 1151 007e 00BF     		.align	2
 1152              	.L70:
 1153 0080 00000000 		.word	Computer
 1154 0084 00000000 		.word	computer
 1155 0088 00000000 		.word	Estimator
 1156 008c 00000000 		.word	estimator
 1157 0090 00000000 		.word	Motor
 1158 0094 00000000 		.word	motor
 1159              		.cfi_endproc
 1160              	.LFE288:
 1162              		.section	.bss.motor,"aw",%nobits
 1163              		.align	2
 1166              	motor:
 1167 0000 00000000 		.space	236
 1167      00000000 
 1167      00000000 
 1167      00000000 
 1167      00000000 
 1168              		.section	.bss.estimator,"aw",%nobits
 1169              		.align	2
 1172              	estimator:
 1173 0000 00000000 		.space	232
 1173      00000000 
 1173      00000000 
 1173      00000000 
 1173      00000000 
 1174              		.section	.bss.computer,"aw",%nobits
 1175              		.align	2
 1178              	computer:
ARM GAS  C:\Users\CuongLe\AppData\Local\Temp\ccsxSNGX.s 			page 53


 1179 0000 00000000 		.space	228
 1179      00000000 
 1179      00000000 
 1179      00000000 
 1179      00000000 
 1180              		.global	huart3
 1181              		.section	.bss.huart3,"aw",%nobits
 1182              		.align	2
 1185              	huart3:
 1186 0000 00000000 		.space	72
 1186      00000000 
 1186      00000000 
 1186      00000000 
 1186      00000000 
 1187              		.global	huart2
 1188              		.section	.bss.huart2,"aw",%nobits
 1189              		.align	2
 1192              	huart2:
 1193 0000 00000000 		.space	72
 1193      00000000 
 1193      00000000 
 1193      00000000 
 1193      00000000 
 1194              		.global	htim7
 1195              		.section	.bss.htim7,"aw",%nobits
 1196              		.align	2
 1199              	htim7:
 1200 0000 00000000 		.space	72
 1200      00000000 
 1200      00000000 
 1200      00000000 
 1200      00000000 
 1201              		.global	htim6
 1202              		.section	.bss.htim6,"aw",%nobits
 1203              		.align	2
 1206              	htim6:
 1207 0000 00000000 		.space	72
 1207      00000000 
 1207      00000000 
 1207      00000000 
 1207      00000000 
 1208              		.global	htim3
 1209              		.section	.bss.htim3,"aw",%nobits
 1210              		.align	2
 1213              	htim3:
 1214 0000 00000000 		.space	72
 1214      00000000 
 1214      00000000 
 1214      00000000 
 1214      00000000 
 1215              		.global	htim2
 1216              		.section	.bss.htim2,"aw",%nobits
 1217              		.align	2
 1220              	htim2:
 1221 0000 00000000 		.space	72
 1221      00000000 
 1221      00000000 
ARM GAS  C:\Users\CuongLe\AppData\Local\Temp\ccsxSNGX.s 			page 54


 1221      00000000 
 1221      00000000 
 1222              		.global	hadc1
 1223              		.section	.bss.hadc1,"aw",%nobits
 1224              		.align	2
 1227              	hadc1:
 1228 0000 00000000 		.space	72
 1228      00000000 
 1228      00000000 
 1228      00000000 
 1228      00000000 
 1229              		.text
 1230              	.Letext0:
 1231              		.file 3 "D:/DATN/InvertedPendulum/Tool/ArmGnuToolchain/arm-none-eabi/include/machine/_default_type
 1232              		.file 4 "D:/DATN/InvertedPendulum/Tool/ArmGnuToolchain/arm-none-eabi/include/sys/_stdint.h"
 1233              		.file 5 "Drivers/CMSIS/Device/ST/STM32F4xx/Include/stm32f407xx.h"
 1234              		.file 6 "Drivers/CMSIS/Device/ST/STM32F4xx/Include/stm32f4xx.h"
 1235              		.file 7 "Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_hal_def.h"
 1236              		.file 8 "Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_hal_rcc_ex.h"
 1237              		.file 9 "Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_hal_rcc.h"
 1238              		.file 10 "Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_hal_gpio.h"
 1239              		.file 11 "Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_hal_dma.h"
 1240              		.file 12 "Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_hal_adc.h"
 1241              		.file 13 "Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_hal_tim.h"
 1242              		.file 14 "Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_hal_uart.h"
 1243              		.file 15 "Middlewares/Third_Party/ARM/FreeRTOS/portable/GCC/ARM_CM4F/portmacro.h"
 1244              		.file 16 "Middlewares/Third_Party/ARM/FreeRTOS/include/FreeRTOS.h"
 1245              		.file 17 "Middlewares/Third_Party/ARM/FreeRTOS/include/task.h"
 1246              		.file 18 "Middlewares/ST/ARM/DSP/Inc/arm_math.h"
 1247              		.file 19 "Middlewares/Third_Party/ARM/FreeRTOS/include/queue.h"
 1248              		.file 20 "Core/Src/Application/Inc/Topic.h"
 1249              		.file 21 "Core/Src/Application/Inc/ActiveObject.h"
 1250              		.file 22 "Core/Src/Common/Inc/dsp.h"
 1251              		.file 23 "Core/Src/Application/Inc/Estimator.h"
 1252              		.file 24 "Core/Src/Application/Inc/Computer.h"
 1253              		.file 25 "Core/Src/Application/Inc/Motor.h"
 1254              		.file 26 "Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_hal_tim_ex.h"
 1255              		.file 27 "Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_hal.h"
 1256              		.file 28 "<built-in>"
ARM GAS  C:\Users\CuongLe\AppData\Local\Temp\ccsxSNGX.s 			page 55


DEFINED SYMBOLS
                            *ABS*:00000000 main.c
C:\Users\CuongLe\AppData\Local\Temp\ccsxSNGX.s:21     .text.MX_GPIO_Init:00000000 $t
C:\Users\CuongLe\AppData\Local\Temp\ccsxSNGX.s:26     .text.MX_GPIO_Init:00000000 MX_GPIO_Init
C:\Users\CuongLe\AppData\Local\Temp\ccsxSNGX.s:151    .text.MX_GPIO_Init:0000008c $d
C:\Users\CuongLe\AppData\Local\Temp\ccsxSNGX.s:157    .text.Error_Handler:00000000 $t
C:\Users\CuongLe\AppData\Local\Temp\ccsxSNGX.s:163    .text.Error_Handler:00000000 Error_Handler
C:\Users\CuongLe\AppData\Local\Temp\ccsxSNGX.s:195    .text.MX_TIM2_Init:00000000 $t
C:\Users\CuongLe\AppData\Local\Temp\ccsxSNGX.s:200    .text.MX_TIM2_Init:00000000 MX_TIM2_Init
C:\Users\CuongLe\AppData\Local\Temp\ccsxSNGX.s:313    .text.MX_TIM2_Init:00000064 $d
C:\Users\CuongLe\AppData\Local\Temp\ccsxSNGX.s:1220   .bss.htim2:00000000 htim2
C:\Users\CuongLe\AppData\Local\Temp\ccsxSNGX.s:318    .text.MX_USART2_UART_Init:00000000 $t
C:\Users\CuongLe\AppData\Local\Temp\ccsxSNGX.s:323    .text.MX_USART2_UART_Init:00000000 MX_USART2_UART_Init
C:\Users\CuongLe\AppData\Local\Temp\ccsxSNGX.s:378    .text.MX_USART2_UART_Init:0000002c $d
C:\Users\CuongLe\AppData\Local\Temp\ccsxSNGX.s:1192   .bss.huart2:00000000 huart2
C:\Users\CuongLe\AppData\Local\Temp\ccsxSNGX.s:384    .text.MX_USART3_UART_Init:00000000 $t
C:\Users\CuongLe\AppData\Local\Temp\ccsxSNGX.s:389    .text.MX_USART3_UART_Init:00000000 MX_USART3_UART_Init
C:\Users\CuongLe\AppData\Local\Temp\ccsxSNGX.s:444    .text.MX_USART3_UART_Init:00000028 $d
C:\Users\CuongLe\AppData\Local\Temp\ccsxSNGX.s:1185   .bss.huart3:00000000 huart3
C:\Users\CuongLe\AppData\Local\Temp\ccsxSNGX.s:451    .text.MX_TIM6_Init:00000000 $t
C:\Users\CuongLe\AppData\Local\Temp\ccsxSNGX.s:456    .text.MX_TIM6_Init:00000000 MX_TIM6_Init
C:\Users\CuongLe\AppData\Local\Temp\ccsxSNGX.s:535    .text.MX_TIM6_Init:00000048 $d
C:\Users\CuongLe\AppData\Local\Temp\ccsxSNGX.s:1206   .bss.htim6:00000000 htim6
C:\Users\CuongLe\AppData\Local\Temp\ccsxSNGX.s:541    .text.MX_TIM7_Init:00000000 $t
C:\Users\CuongLe\AppData\Local\Temp\ccsxSNGX.s:546    .text.MX_TIM7_Init:00000000 MX_TIM7_Init
C:\Users\CuongLe\AppData\Local\Temp\ccsxSNGX.s:625    .text.MX_TIM7_Init:00000044 $d
C:\Users\CuongLe\AppData\Local\Temp\ccsxSNGX.s:1199   .bss.htim7:00000000 htim7
C:\Users\CuongLe\AppData\Local\Temp\ccsxSNGX.s:631    .text.MX_TIM3_Init:00000000 $t
C:\Users\CuongLe\AppData\Local\Temp\ccsxSNGX.s:636    .text.MX_TIM3_Init:00000000 MX_TIM3_Init
C:\Users\CuongLe\AppData\Local\Temp\ccsxSNGX.s:748    .text.MX_TIM3_Init:00000060 $d
C:\Users\CuongLe\AppData\Local\Temp\ccsxSNGX.s:1213   .bss.htim3:00000000 htim3
C:\Users\CuongLe\AppData\Local\Temp\ccsxSNGX.s:754    .text.MX_ADC1_Init:00000000 $t
C:\Users\CuongLe\AppData\Local\Temp\ccsxSNGX.s:759    .text.MX_ADC1_Init:00000000 MX_ADC1_Init
C:\Users\CuongLe\AppData\Local\Temp\ccsxSNGX.s:866    .text.MX_ADC1_Init:00000060 $d
C:\Users\CuongLe\AppData\Local\Temp\ccsxSNGX.s:1227   .bss.hadc1:00000000 hadc1
C:\Users\CuongLe\AppData\Local\Temp\ccsxSNGX.s:873    .text.SystemClock_Config:00000000 $t
C:\Users\CuongLe\AppData\Local\Temp\ccsxSNGX.s:879    .text.SystemClock_Config:00000000 SystemClock_Config
C:\Users\CuongLe\AppData\Local\Temp\ccsxSNGX.s:1031   .text.SystemClock_Config:0000009c $d
C:\Users\CuongLe\AppData\Local\Temp\ccsxSNGX.s:1037   .text.main:00000000 $t
C:\Users\CuongLe\AppData\Local\Temp\ccsxSNGX.s:1043   .text.main:00000000 main
C:\Users\CuongLe\AppData\Local\Temp\ccsxSNGX.s:1153   .text.main:00000080 $d
C:\Users\CuongLe\AppData\Local\Temp\ccsxSNGX.s:1178   .bss.computer:00000000 computer
C:\Users\CuongLe\AppData\Local\Temp\ccsxSNGX.s:1172   .bss.estimator:00000000 estimator
C:\Users\CuongLe\AppData\Local\Temp\ccsxSNGX.s:1166   .bss.motor:00000000 motor
C:\Users\CuongLe\AppData\Local\Temp\ccsxSNGX.s:1163   .bss.motor:00000000 $d
C:\Users\CuongLe\AppData\Local\Temp\ccsxSNGX.s:1169   .bss.estimator:00000000 $d
C:\Users\CuongLe\AppData\Local\Temp\ccsxSNGX.s:1175   .bss.computer:00000000 $d
C:\Users\CuongLe\AppData\Local\Temp\ccsxSNGX.s:1182   .bss.huart3:00000000 $d
C:\Users\CuongLe\AppData\Local\Temp\ccsxSNGX.s:1189   .bss.huart2:00000000 $d
C:\Users\CuongLe\AppData\Local\Temp\ccsxSNGX.s:1196   .bss.htim7:00000000 $d
C:\Users\CuongLe\AppData\Local\Temp\ccsxSNGX.s:1203   .bss.htim6:00000000 $d
C:\Users\CuongLe\AppData\Local\Temp\ccsxSNGX.s:1210   .bss.htim3:00000000 $d
C:\Users\CuongLe\AppData\Local\Temp\ccsxSNGX.s:1217   .bss.htim2:00000000 $d
C:\Users\CuongLe\AppData\Local\Temp\ccsxSNGX.s:1224   .bss.hadc1:00000000 $d

UNDEFINED SYMBOLS
HAL_GPIO_WritePin
ARM GAS  C:\Users\CuongLe\AppData\Local\Temp\ccsxSNGX.s 			page 56


HAL_GPIO_Init
memset
HAL_TIM_Encoder_Init
HAL_TIMEx_MasterConfigSynchronization
HAL_UART_Init
HAL_TIM_Base_Init
HAL_ADC_Init
HAL_ADC_ConfigChannel
HAL_RCC_OscConfig
HAL_RCC_ClockConfig
HAL_Init
vTaskStartScheduler
Computer
Estimator
Motor
